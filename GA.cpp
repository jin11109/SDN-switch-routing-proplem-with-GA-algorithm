#include<iostream>
#include<vector>
#include<map>
#include<set>
#include<queue>
#include<cmath>
#include<algorithm>
#include<set>
#include<string>

using namespace std;

unsigned int nodes_num, sdn_nodes_num, dsts_num, links_num, flows_num, flows_size = 0;
vector<unsigned int> sdn_list;

//map[dst] = {start, flowsize}
map<unsigned int, vector<pair<unsigned int, int>>> flows;

//map[sdn id][dst id] = {neighbor, neighbor2, ...(sdn send to) }
map<unsigned int, map<unsigned int, vector<unsigned int>>> model;

//map[sdn id][dst id] = break point index(end)(not contain)
map<unsigned int, map<unsigned int, unsigned>> model_to_chromosome;

//vector[index - 1] = the start of index.th sdn node trail's percentage in chromosome
//vector[index]     = the end of index.th sdn node trail's percentage in chromosome (not contain) 
vector<unsigned int> gene_breakpoint;

//unsigned int[index] = its trail id 
unsigned int* gene_to_trail_id;

//for bfs not calculating all the order list
set<unsigned> use_flow;

unsigned int **link_to_id;

//const value
unsigned int chromosome_size = 0; //number of genes
int POPULATION_NUM = 20; 
int BINARY_NUM = 8; //gene is 8 bits code
int PRECISION = 256;
unsigned int FLOWSUSE = 10;
int STOP = 5; //condition of the generation stop
double TEST = 1; //for calculating fitness, discard the packet smaller than TEST
double IGNORE_PRECENTAGE = 5;

//srand 100
unsigned int rand_num[10000] = {365, 1216, 5415, 16704, 24504, 11254, 24698, 1702, 23209, 5629, 23830, 32505, 19574, 16513, 11529, 13026, 3768, 1031, 22229, 7851, 15646, 7121, 15810, 6470, 4195, 25857, 29816, 11409, 25981, 6401, 7628, 17112, 17688, 1825, 20443, 19867, 32578, 4482, 11605, 18834, 12136, 28980, 10524, 17391, 15489, 1435, 10254, 17635, 10633, 13079, 29982, 17251, 18993, 5347, 15274, 1580, 12245, 1598, 31753, 5637, 25262, 18121, 11875, 9540, 15177, 15921, 1989, 4243, 28727, 8973, 5492, 23796, 11271, 2314, 8834, 22275, 16241, 6725, 7072, 14203, 17364, 32760, 25907, 28924, 16867, 15961, 22442, 2828, 12442, 1983, 22030, 11867, 24696, 19207, 13018, 17995, 9960, 310, 22286, 23471, 24064, 32351, 24447, 3283, 3181, 18888, 9329, 18110, 18862, 16712, 24423, 9139, 
12929, 3059, 25402, 4862, 411, 8186, 6761, 11757, 8348, 24524, 16304, 24092, 17730, 4737, 1244, 14581, 28381, 15225, 7133, 13432, 22531, 5440, 22045, 6456, 12420, 13237, 19984, 21926, 13216, 4460, 20237, 5778, 28280, 3152, 28508, 18671, 19139, 5517, 4240, 26839, 12738, 6317, 14870, 16847, 23414, 24064, 527, 1099, 7696, 27714, 30811, 21621, 20905, 11640, 18422, 13866, 7219, 23323, 648, 31301, 14768, 30072, 18999, 4385, 5282, 19031, 19904, 26201, 17090, 20187, 19142, 10706, 14836, 20649, 2666, 10748, 20859, 16972, 3099, 9044, 25449, 9945, 21167, 10542, 8794, 24782, 1971, 2993, 30562, 26688, 
26880, 24355, 31812, 11318, 13455, 2151, 26085, 9040, 1679, 29379, 29440, 20396, 23988, 21223, 13082, 14857, 14801, 6955, 14777, 10285, 2217, 1305, 4561, 4741, 21763, 21547, 1407, 7436, 27644, 13781, 3577, 5997, 27809, 25286, 32710, 18540, 30141, 25964, 18218, 2178, 26096, 10678, 18661, 28615, 25089, 14877, 15133, 6934, 5493, 19941, 2712, 19563, 24929, 3232, 8238, 27279, 28028, 10997, 6782, 9208, 20344, 17567, 20449, 14570, 15507, 6072, 11420, 12515, 31081, 1336, 16730, 32566, 31756, 31417, 5593, 23286, 29782, 10621, 5091, 19989, 11902, 11953, 7808, 16333, 1002, 4339, 10602, 32319, 20036, 
14099, 25793, 2907, 4304, 15382, 20736, 12543, 19453, 17537, 20272, 8291, 12090, 14548, 347, 8372, 7434, 2388, 3908, 4351, 13659, 24333, 9045, 16721, 23060, 24088, 13273, 26397, 25069, 23834, 27755, 12509, 28035, 13837, 19374, 15612, 4780, 5187, 18751, 30708, 20999, 25511, 6120, 9652, 2776, 17735, 22551, 6724, 24851, 11535, 20110, 26027, 18871, 3287, 29531, 30481, 12637, 12449, 27915, 31521, 28945, 12315, 19483, 31153, 1376, 6508, 6831, 30373, 15282, 14636, 5254, 6672, 18907, 9140, 6958, 9117, 1004, 25497, 14964, 11566, 9295, 29043, 20767, 194, 23059, 22755, 12766, 1436, 4484, 11988, 20606, 2210, 11007, 15616, 20320, 25603, 5124, 1718, 299, 18972, 30349, 2779, 12990, 14237, 29342, 26416, 20841, 20711, 5662, 16594, 16732, 11961, 1765, 5639, 30815, 24076, 4886, 23863, 12484, 5947, 7087, 5433, 18586, 28775, 3422, 10961, 8484, 3866, 23447, 22390, 4746, 7466, 12771, 23896, 18381, 1249, 
20347, 17569, 5888, 14426, 16661, 32251, 10678, 2094, 27902, 3667, 2487, 19793, 9577, 10205, 26103, 27190, 13575, 21593, 9160, 26426, 6615, 5268, 4174, 11839, 25152, 6449, 17971, 10647, 24669, 30889, 7069, 18981, 10136, 1681, 11357, 14526, 2170, 12316, 21610, 14037, 32449, 480, 11917, 29272, 17843, 15069, 27485, 20693, 1715, 4283, 5230, 30177, 22034, 2387, 4038, 2234, 29223, 3441, 30608, 32043, 30882, 6360, 6677, 25520, 1565, 11143, 13799, 1243, 29684, 24635, 18015, 19446, 10327, 19509, 29770, 17642, 11421, 3133, 32480, 12640, 32219, 8935, 12534, 31013, 19382, 3093, 13940, 31187, 6517, 10685, 26120, 31150, 30043, 28141, 21276, 16844, 14899, 26124, 15366, 9081, 3884, 2914, 10367, 27865, 6631, 31963, 19543, 4303, 5839, 1543, 615, 1566, 19369, 5990, 29638, 8654, 2155, 5091, 16192, 28882, 10834, 6046, 13571, 21735, 21807, 7150, 31388, 26815, 22274, 7335, 11042, 28511, 27081, 8856, 18353, 21190, 18330, 22360, 3098, 30159, 17648, 1603, 31705, 23896, 25923, 11967, 15176, 29860, 7643, 3012, 2322, 28926, 15077, 13467, 27625, 6303, 6855, 15077, 26748, 28882, 13233, 27104, 21411, 5974, 6004, 2790, 5341, 19204, 27032, 21302, 27901, 26545, 31656, 24311, 5408, 22870, 977, 23930, 18914, 19055, 8620, 21184, 5842, 4512, 9559, 4668, 30243, 8862, 19658, 22233, 6308, 1613, 27496, 7231, 27122, 7718, 12245, 7506, 9451, 14044, 31752, 7164, 3175, 11839, 929, 22061, 7203, 12384, 9340, 19488, 17918, 20470, 11654, 15327, 3944, 32256, 1999, 30217, 8983, 9388, 30177, 28627, 11003, 27000, 23889, 13901, 1653, 23191, 20115, 9959, 12484, 2966, 16146, 4403, 27584, 25919, 10624, 9708, 714, 11454, 2155, 22328, 14851, 1538, 24338, 3626, 15804, 30054, 17526, 22923, 9774, 9361, 9396, 31194, 25451, 28314, 11409, 28305, 9621, 30576, 4951, 26794, 5454, 21114, 14048, 18018, 28783, 31866, 15856, 31805, 24317, 11447, 13512, 3914, 5209, 16731, 22519, 1192, 4278, 19226, 372, 27209, 5840, 31764, 27626, 23798, 10716, 32253, 16467, 12179, 10170, 29563, 
8648, 6053, 21362, 10447, 11159, 785, 25566, 14264, 5527, 31526, 27300, 8852, 29368, 14558, 10088, 10953, 15838, 20065, 6975, 26211, 10480, 2507, 28774, 22783, 25131, 29999, 2612, 5095, 17341, 6108, 20813, 8574, 8591, 23775, 4121, 16351, 10594, 17097, 29556, 11969, 2333, 14514, 935, 5278, 20325, 19581, 10647, 16148, 14959, 3678, 5181, 17035, 26898, 19866, 4694, 15640, 8737, 4750, 13404, 16545, 9719, 31219, 19124, 10306, 15955, 21856, 5161, 23792, 103, 13584, 12441, 19804, 29995, 16102, 11246, 7450, 7159, 30382, 13648, 20227, 31569, 23462, 22170, 28376, 13316, 32573, 16394, 32296, 19058, 31002, 31804, 10355, 6698, 23648, 8281, 655, 10173, 4657, 19596, 22859, 17614, 15729, 4277, 21331, 14953, 3020, 2402, 27219, 28054, 6138, 18683, 32607, 12845, 16705, 24892, 3731, 16363, 7228, 8424, 17910, 32198, 24796, 22972, 932, 6014, 31148, 17058, 32557, 4469, 6233, 18984, 8760, 20160, 29553, 27952, 21612, 15742, 4459, 26089, 16016, 7528, 17640, 18174, 18672, 5290, 15928, 22285, 22787, 1778, 22048, 16474, 4684, 25286, 30170, 26821, 7806, 22810, 16478, 1529, 16611, 13090, 24800, 16871, 14590, 14949, 8858, 883, 14448, 26387, 13771, 12140, 28696, 18584, 17920, 30146, 30846, 23665, 17810, 32499, 6514, 18238, 4720, 3527, 13552, 9241, 22558, 26941, 22855, 24103, 21246, 8901, 15994, 18540, 22735, 3247, 13031, 26596, 19059, 29924, 15142, 9167, 21237, 30676, 26932, 20556, 6090, 32687, 11985, 18217, 15959, 17368, 12070, 762, 27316, 23703, 21419, 28776, 7088, 16142, 10312, 27084, 2069, 13678, 17083, 4349, 24877, 10090, 14649, 31589, 7812, 18156, 27736, 25691, 14064, 29959, 10284, 22957, 27343, 29486, 24752, 5755, 912, 13475, 3432, 76, 11381, 25649, 26693, 31323, 18582, 29214, 5065, 818, 27178, 15964, 27755, 20602, 20226, 13055, 2365, 23826, 1622, 25332, 12236, 7518, 9156, 239, 16200, 19938, 9110, 17061, 22245, 4111, 25668, 1084, 15232, 18780, 22841, 16383, 16518, 30873, 23258, 11863, 14354, 30080, 14277, 8694, 11861, 20110, 27478, 29782, 29755, 14609, 7536, 5730, 15691, 18305, 20346, 6515, 21712, 23059, 23207, 17533, 11830, 32140, 9083, 2443, 21686, 11347, 9867, 28520, 32310, 9675, 17028, 17311, 17770, 20447, 25454, 10406, 20288, 22239, 29490, 21591, 24443, 32650, 13146, 4767, 8349, 24428, 25625, 24698, 8971, 28522, 23691, 13087, 22380, 11419, 30781, 16247, 2130, 15193, 32240, 21972, 5916, 16536, 25498, 9696, 27, 25975, 5038, 32468, 27123, 14613, 6045, 24554, 17476, 25766, 19357, 27924, 14730, 26054, 32681, 7150, 30786, 17164, 10697, 11505, 5967, 28387, 3475, 17642, 6555, 19605, 31986, 15019, 21761, 2985, 5670, 27905, 16491, 19823, 8972, 13542, 27959, 18649, 32160, 18423, 12256, 24716, 7616, 7976, 15322, 24375, 13363, 13750, 14013, 20004, 30441, 13405, 1702, 6669, 644, 23756, 24538, 31280, 29976, 18774, 21933, 19877, 9775, 21738, 29347, 25328, 8209, 16197, 7124, 24019, 15938, 24934, 17301, 12134, 5451, 1602, 12116, 21609, 1981, 15290, 21700, 19928, 11380, 12234, 4667, 1984, 27161, 28163, 18008, 8786, 27626, 4411, 2792, 20789, 21438, 15747, 5898, 17697, 19779, 30297, 3218, 21418, 26251, 9503, 13484, 20825, 20935, 25548, 28610, 20993, 29778, 24546, 23711, 17232, 26353, 27040, 31444, 5541, 19289, 888, 19546, 26401, 6897, 1475, 14970, 25857, 21210, 10932, 16874, 22315, 8493, 5770, 10809, 2566, 30595, 12298, 19564, 2703, 9915, 23853, 11498, 26794, 26615, 30742, 27797, 29621, 30440, 4166, 21818, 9571, 8524, 19475, 1323, 11976, 28596, 32342, 32298, 23472, 19339, 17509, 7049, 16437, 18004, 16449, 13200, 25745, 26163, 17168, 26655, 25392, 7087, 31693, 27284, 11530, 17590, 32318, 14063, 26671, 24801, 13862, 2613, 7331, 23290, 6845, 6162, 9069, 3004, 13917, 17345, 3051, 23001, 22142, 24625, 27496, 6978, 30692, 15200, 19184, 7074, 17175, 30987, 10083, 27691, 11540, 138, 14281, 24726, 4162, 502, 28133, 23909, 20903, 22156, 25869, 23404, 26204, 16470, 13113, 17551, 19774, 19720, 20569, 3533, 20711, 24616, 2028, 12926, 9693, 10353, 10446, 29912, 14600, 1146, 26449, 1976, 17002, 6803, 9616, 1440, 28682, 10223, 5632, 22779, 15665, 19209, 27720, 31145, 18905, 19776, 4179, 9143, 18019, 12228, 
1955, 27502, 18312, 32694, 2280, 21136, 5778, 13707, 28113, 17118, 20940, 9138, 30498, 4573, 28983, 14454, 5895, 29146, 894, 5925, 13735, 29740, 14124, 19570, 9213, 185, 1053, 8728, 12515, 26300, 2354, 21952, 5232, 27333, 29257, 14117, 9604, 30209, 31341, 29046, 3489, 19131, 24137, 1020, 28413, 25123, 21219, 11772, 12501, 22350, 21639, 20959, 26115, 895, 25088, 5008, 467, 12197, 30735, 13862, 20243, 32548, 24853, 31939, 23913, 30680, 11539, 4795, 22762, 19287, 26068, 16121, 32743, 17783, 21353, 26271, 11018, 1041, 25814, 8941, 7074, 23556, 4363, 28260, 1084, 3964, 17430, 11563, 32627, 14708, 11414, 5297, 26889, 4729, 32115, 13972, 19766, 29361, 30668, 12994, 25151, 13597, 20785, 21726, 16459, 24603, 18963, 8421, 19315, 14127, 2168, 4881, 1048, 6658, 2803, 5885, 12665, 21675, 18388, 31243, 6788, 17710, 19612, 23811, 16621, 31298, 29108, 26876, 21118, 12120, 30302, 19328, 17582, 18904, 6379, 15851, 20084, 15278, 32559, 7188, 13405, 28421, 818, 20015, 6877, 8018, 14376, 2546, 21218, 17301, 15267, 12023, 21679, 28124, 9992, 16994, 
23784, 17416, 13631, 19907, 24553, 30163, 28847, 9534, 18268, 21522, 32106, 22761, 11787, 27960, 21412, 21877, 3570, 21276, 32362, 30737, 5273, 28156, 12945, 6539, 4513, 193, 20972, 21688, 13212, 17028, 11970, 3095, 1826, 12626, 9086, 29361, 27681, 556, 21161, 7235, 30068, 21074, 8982, 22687, 26295, 32194, 19548, 24144, 17498, 16123, 1929, 2173, 10741, 31750, 14357, 11280, 23259, 25783, 8469, 18454, 16626, 17969, 31409, 5481, 19906, 14248, 31704, 14733, 29131, 1131, 11315, 8409, 7708, 30497, 4695, 17367, 1057, 27218, 4670, 23533, 1981, 16938, 4088, 19260, 6040, 13178, 10910, 15304, 24507, 
31744, 9096, 14809, 2650, 28648, 17855, 19874, 752, 146, 25013, 22561, 28562, 8342, 12596, 14150, 21628, 10502, 14229, 30039, 5617, 9203, 29234, 1939, 19522, 8242, 27934, 24598, 7724, 29279, 4115, 22268, 5478, 1827, 14251, 11977, 8571, 10931, 28371, 14345, 15574, 27033, 23677, 22579, 26651, 28343, 14742, 30675, 28606, 649, 25400, 7144, 12238, 4010, 23840, 11915, 18961, 20634, 22626, 15058, 598, 2750, 4699, 8180, 13575, 31400, 8168, 32686, 7166, 21913, 30933, 27621, 21913, 1092, 22425, 6028, 25105, 31445, 16704, 3784, 2823, 21042, 18856, 14930, 26976, 1665, 26608, 12830, 32083, 32490, 28462, 9018, 3264, 17054, 32608, 19704, 15300, 32536, 678, 22863, 5002, 17315, 2734, 5247, 27492, 5660, 8815, 18420, 26650, 17657, 26650, 15469, 1410, 6794, 845, 10077, 24144, 21887, 19338, 1937, 9776, 2731, 13033, 13588, 2578, 21511, 18697, 10320, 27333, 28922, 27212, 15477, 9672, 15319, 28484, 28959, 24669, 6312, 28776, 28467, 2270, 16682, 29196, 21769, 596, 4632, 3216, 3537, 11846, 15788, 25815, 14383, 18639, 1892, 2298, 24617, 19187, 27906, 1342, 4163, 18227, 24790, 17732, 32232, 29791, 31039, 5504, 21772, 23212, 14704, 22764, 26384, 22279, 22384, 18174, 16614, 26792, 9060, 17879, 27765, 31977, 29713, 13501, 24895, 11609, 15517, 15051, 26689, 9228, 12181, 28135, 30490, 6710, 4917, 26101, 18032, 9464, 10979, 4170, 10128, 17530, 23036, 22372, 23892, 26938, 25555, 29400, 31818, 25508, 27895, 29579, 5650, 29154, 8629, 24613, 13320, 24565, 9694, 30147, 25892, 28165, 12747, 24813, 25374, 
28917, 157, 711, 4821, 24891, 29641, 5771, 25585, 19439, 4053, 19254, 21447, 23073, 13916, 9602, 6014, 25200, 16728, 15893, 12656, 14552, 25505, 12280, 30163, 12492, 29360, 19274, 17049, 1413, 32169, 24630, 28308, 7321, 21913, 13858, 13278, 22223, 27387, 809, 6520, 25394, 9346, 30668, 8241, 18532, 4882, 13028, 14026, 6197, 9999, 12763, 14679, 372, 19163, 4380, 32744, 13318, 1690, 12488, 16489, 19252, 4409, 4523, 18375, 12873, 29358, 32366, 20053, 14173, 7041, 21774, 27501, 16492, 5515, 1165, 27738, 22187, 12798, 4839, 4725, 31771, 22693, 16199, 31887, 32606, 23661, 5243, 16271, 16842, 31013, 32677, 29276, 9148, 24194, 16180, 12542, 2862, 27750, 15891, 23296, 14476, 1121, 12064, 4376, 24004, 5241, 31968, 13834, 11165, 16166, 24945, 30409, 18761, 17569, 15040, 7647, 27197, 4446, 28412, 13840, 30272, 5591, 30026, 16442, 30658, 19340, 22202, 128, 17520, 2888, 15225, 9895, 5125, 6309, 22601, 21952, 31075, 1746, 20527, 20232, 29154, 23188, 24171, 17420, 32488, 3467, 23725, 5137, 32186, 22199, 31110, 30898, 12689, 23611, 13085, 26059, 13297, 12896, 27171, 8342, 16182, 19420, 8457, 21012, 1904, 16213, 15216, 6319, 5488, 1569, 20961, 23837, 22563, 6224, 28094, 28295, 24607, 2540, 16760, 10731, 31100, 3455, 12547, 12479, 6117, 32726, 16007, 29399, 18670, 24837, 12121, 3976, 8360, 24235, 32041, 21006, 21620, 21367, 26493, 19755, 30740, 24555, 14686, 23057, 4360, 96, 5968, 32386, 29719, 17483, 27016, 32310, 8492, 2750, 13914, 7037, 4451, 26674, 241, 19237, 11108, 6531, 66, 24478, 20976, 10300, 16962, 28508, 16569, 9237, 3927, 31357, 11127, 5562, 8717, 5036, 21304, 3790, 1803, 4165, 1527, 31536, 14661, 953, 15473, 6013, 20083, 2613, 18996, 12502, 18369, 9854, 21497, 4579, 23240, 14112, 51, 16663, 18109, 18119, 5608, 29750, 2536, 15341, 32192, 23829, 2904, 11189, 22876, 13218, 3286, 21527, 9448, 8483, 30999, 318, 5876, 28867, 25142, 25134, 12927, 10570, 17505, 4266, 16213, 29740, 24786, 20565, 7324, 30149, 17664, 18711, 8617, 31459, 21015, 16578, 280, 8069, 22694, 6134, 25115, 21218, 7320, 3650, 9234, 23725, 21862, 4491, 92, 18328, 32395, 7346, 32365, 21783, 3127, 26993, 28193, 24166, 22599, 31110, 23632, 18125, 23413, 15124, 13731, 25379, 1740, 19526, 2982, 31377, 20832, 8757, 12318, 17560, 20027, 5900, 6812, 2133, 24218, 9066, 19538, 16644, 21594, 18183, 9766, 27588, 6317, 25755, 25861, 25241, 11025, 5371, 14458, 26807, 3203, 13701, 10111, 19454, 27375, 
13759, 14227, 16321, 8428, 26683, 2572, 21707, 23974, 23230, 25519, 12964, 2331, 31136, 21118, 30224, 14475, 630, 26065, 22745, 18217, 2543, 11432, 1742, 26391, 6396, 28224, 17420, 16017, 9524, 20708, 18556, 25961, 26742, 25350, 29853, 22195, 23504, 14990, 17284, 10945, 22943, 7794, 7713, 11602, 11000, 28295, 29635, 9222, 1095, 15767, 15326, 22805, 13622, 20915, 17677, 15937, 4049, 32458, 30035, 15369, 19175, 3963, 24486, 288, 25523, 12328, 21166, 26141, 17083, 4172, 17610, 14708, 10233, 11790, 16724, 1957, 8761, 22, 15142, 13235, 5570, 29087, 26716, 29656, 5688, 25805, 2908, 1655, 6081, 12097, 19732, 13138, 15207, 17644, 3203, 27901, 15038, 1312, 18299, 9875, 14022, 24045, 165, 12711, 28178, 14762, 18117, 14461, 7722, 27346, 16703, 10362, 5167, 2578, 26075, 8410, 12477, 31391, 15301, 14753, 25365, 2253, 20440, 14036, 24444, 22238, 15899, 31720, 5342, 3095, 29836, 21371, 9655, 31258, 4893, 24386, 26676, 11375, 3325, 17475, 12693, 5732, 28440, 26436, 28885, 21271, 28641, 19843, 23693, 11217, 11343, 30119, 14358, 22677, 13861, 15607, 29677, 12025, 22391, 9418, 11612, 13109, 12138, 3134, 20823, 16250, 3131, 12845, 26277, 13701, 9859, 4957, 17216, 28275, 8633, 30967, 12541, 23767, 30200, 19259, 17775, 5386, 9986, 31857, 28937, 12226, 27782, 8227, 2436, 15078, 12190, 649, 21376, 11425, 412, 21573, 20334, 3254, 28678, 15953, 
19885, 18451, 23007, 29237, 3571, 25256, 10792, 2685, 28143, 31609, 7079, 20330, 27437, 22258, 27111, 13288, 31801, 25467, 4992, 7872, 1287, 27725, 4504, 21519, 27282, 28292, 10410, 4855, 2500, 17525, 13959, 15252, 5526, 6977, 8602, 4401, 8312, 26283, 19823, 27836, 21747, 18214, 14455, 29560, 8589, 5682, 9989, 9714, 23533, 3305, 32669, 23350, 7999, 14549, 15470, 31810, 27098, 13061, 5661, 5051, 15904, 19808, 19396, 1503, 19110, 10809, 11323, 1211, 23958, 29219, 17558, 5278, 10065, 7174, 22510, 13517, 4184, 31602, 1125, 120, 9836, 2356, 14692, 23533, 25844, 6695, 25383, 524, 23712, 30797, 28540, 1531, 32332, 4638, 4039, 7451, 3367, 13344, 23626, 17722, 31764, 184, 15523, 6922, 14928, 6720, 14742, 29905, 13141, 13145, 7181, 5475, 1535, 31107, 32093, 2894, 14062, 3563, 11467, 4180, 25131, 131, 3663, 32030, 12302, 344, 22168, 9518, 4447, 15393, 18511, 12054, 1723, 4627, 22176, 15591, 30521, 9725, 20727, 30957, 23118, 28304, 31751, 23193, 14574, 17150, 15377, 14271, 18932, 5576, 13411, 30210, 11716, 20944, 31, 28812, 3375, 3510, 26685, 26114, 8087, 2401, 15059, 694, 23635, 10716, 10132, 23327, 23380, 26468, 17815, 27271, 10505, 25023, 9819, 27140, 4481, 3791, 6663, 5033, 9936, 14182, 2294, 9725, 1715, 13916, 1650, 15276, 9079, 11743, 192, 19325, 5142, 9995, 12894, 25732, 12196, 20410, 14472, 31385, 30697, 19102, 29440, 22281, 5968, 17805, 4367, 395, 30208, 18971, 28615, 13685, 10824, 31854, 11660, 14127, 18496, 15438, 5843, 7656, 21677, 23676, 20520, 25993, 24358, 25669, 24950, 23783, 1909, 3926, 1667, 17469, 29248, 32722, 26810, 12249, 28905, 22178, 9773, 789, 24754, 9741, 18906, 6025, 1317, 29320, 6445, 25727, 25011, 13775, 23239, 15015, 22171, 6196, 31358, 26637, 1293, 21559, 11941, 22599, 16015, 30808, 653, 1267, 929, 31529, 27211, 19041, 21916, 21927, 17340, 29836, 24544, 6090, 26823, 6223, 15406, 11099, 14050, 3285, 22099, 14598, 12248, 6482, 13063, 25520, 6089, 10992, 7700, 19979, 13426, 9997, 955, 7783, 4526, 11683, 31059, 29899, 28477, 24583, 14643, 1860, 15301, 32727, 5586, 22653, 16662, 31277, 10285, 15504, 26034, 13081, 15721, 8220, 10125, 9551, 18362, 17816, 13329, 10780, 22147, 27878, 16741, 32159, 22975, 6443, 3311, 21301, 13471, 26847, 8984, 3637, 25460, 13344, 21583, 29406, 14544, 25932, 31568, 25485, 30184, 16334, 30886, 32307, 16957, 2360, 1902, 11783, 18044, 18579, 20319, 1400, 28322, 4082, 22535, 29798, 5987, 1102, 16727, 11921, 10957, 6029, 25954, 22098, 28713, 10468, 18274, 16265, 4898, 32607, 29692, 24278, 9769, 21182, 14021, 14604, 9239, 22147, 18692, 26338, 13588, 31561, 23994, 236, 15032, 23127, 11999, 1994, 26481, 32629, 28655, 7328, 25893, 1279, 18853, 7622, 20248, 13879, 17158, 31680, 783, 11231, 15266, 23152, 3510, 5896, 23319, 21130, 13887, 11813, 6614, 26441, 27980, 28771, 18218, 1120, 8975, 13117, 12406, 6196, 18607, 11850, 19902, 7752, 238, 31066, 5992, 11768, 17418, 12482, 26948, 24939, 31456, 13300, 5835, 10435, 21847, 12883, 5284, 23958, 24572, 31301, 23405, 10914, 7402, 16009, 26551, 7100, 9197, 17867, 31570, 27146, 3559, 14453, 972, 22642, 12146, 201, 18996, 13394, 26310, 28973, 20515, 20082, 222, 9413, 32254, 55, 31190, 20039, 1653, 4377, 7320, 26891, 9039, 4182, 17847, 98, 3946, 30440, 19867, 297, 25085, 9653, 24031, 18846, 12065, 5127, 13815, 27506, 4496, 16955, 8982, 21535, 428, 17597, 12110, 20347, 7619, 31540, 19450, 6285, 18321, 18425, 31577, 27808, 15110, 23502, 15739, 21655, 586, 27085, 17505, 6272, 27391, 22430, 13152, 4460, 24774, 15853, 28102, 19837, 20740, 19739, 14528, 14912, 31718, 27188, 13435, 18749, 22178, 6178, 28810, 17101, 25344, 288, 8072, 15148, 8218, 13425, 11774, 24015, 30815, 27729, 16518, 760, 20702, 28716, 23857, 17287, 7618, 26382, 17447, 32531, 8216, 11867, 15245, 2105, 12505, 2240, 21164, 27444, 15652, 14697, 24655, 686, 22475, 24436, 16492, 20182, 1041, 9638, 5383, 17075, 7602, 6749, 3668, 31672, 548, 17350, 32284, 6040, 24349, 17488, 14945, 7260, 19029, 9057, 4933, 9906, 1677, 3655, 24616, 21128, 6608, 9585, 26641, 4569, 6393, 10719, 10575, 26055, 19573, 7895, 17504, 11755, 4682, 13274, 3601, 489, 8536, 2774, 3303, 18759, 4575, 11933, 26046, 1407, 20290, 19862, 31664, 594, 22283, 3250, 18232, 24672, 26926, 1698, 10391, 11766, 3474, 19272, 14711, 551, 4813, 29547, 25039, 19998, 27184, 7342, 13318, 22706, 1283, 25027, 21595, 6203, 5905, 8924, 28548, 24228, 25192, 12898, 1173, 
3010, 28762, 14826, 1572, 14820, 23495, 27493, 5803, 6316, 4255, 21142, 25645, 27165, 9378, 23242, 26397, 22004, 11626, 23747, 2171, 1852, 14252, 18677, 29504, 18461, 17339, 16885, 5372, 4085, 27469, 15150, 4542, 14250, 5250, 28630, 12084, 18494, 22050, 17952, 31507, 6051, 28966, 29363, 12473, 10193, 891, 28764, 8722, 31767, 22530, 8191, 10168, 22702, 30683, 9428, 23646, 8340, 24803, 20687, 10094, 17815, 1403, 13664, 23281, 32432, 31116, 11357, 26800, 14483, 28872, 27965, 29336, 29828, 29234, 646, 14947, 2412, 25824, 13192, 13429, 31532, 23039, 13900, 16900, 23601, 14361, 15816, 22140, 27977, 11155, 14420, 3106, 28597, 122, 21090, 27639, 23935, 18815, 4457, 27871, 31758, 30783, 6946, 28162, 31991, 19144, 31991, 12403, 8470, 12889, 1977, 5136, 4574, 5994, 5009, 7081, 25837, 7916, 16441, 31844, 32227, 21714, 1387, 15455, 17013, 24528, 10138, 9368, 21693, 8803, 25825, 2570, 18388, 27921, 28217, 12825, 675, 9714, 238, 22064, 17654, 2415, 13396, 2729, 722, 26698, 20406, 3309, 2569, 1759, 15503, 15580, 9739, 425, 26876, 17775, 13823, 23303, 11890, 14491, 26899, 5696, 4268, 8825, 5392, 965, 26856, 22437, 23345, 8887, 20819, 740, 3893, 15273, 25794, 13833, 5299, 6311, 9890, 537, 9902, 32375, 10034, 23213, 15721, 19230, 14320, 18584, 1660, 23975, 17488, 12234, 9000, 11039, 8884, 11380, 8424, 9444, 29081, 19309, 24648, 21536, 21774, 8661, 24058, 20112, 10347, 2040, 4647, 26762, 30783, 31604, 23043, 18494, 22666, 27807, 8100, 15932, 27437, 31523, 13332, 1846, 10910, 26091, 4005, 23303, 19680, 12867, 27780, 27893, 21171, 20026, 28561, 16691, 5896, 12875, 21358, 31658, 29367, 17981, 18902, 3066, 18548, 3400, 1841, 23227, 3328, 23929, 11365, 23560, 8092, 9816, 750, 11070, 1731, 2759, 16177, 5121, 25880, 21037, 15629, 11392, 15006, 29908, 27316, 25850, 17959, 18320, 21945, 12418, 6927, 2722, 3690, 11007, 16169, 24539, 21855, 24694, 25850, 27653, 18259, 6540, 5669, 10110, 31539, 20806, 25127, 8742, 18037, 14356, 25924, 
15995, 7083, 26638, 15297, 10243, 14168, 11901, 13652, 2283, 3842, 3741, 23769, 17133, 13960, 24993, 10310, 12151, 12214, 14328, 25825, 11017, 22551, 24527, 13233, 28638, 26890, 13527, 10802, 976, 15896, 7496, 27469, 15734, 21893, 22566, 19590, 9359, 16165, 195, 23416, 12707, 28017, 27525, 22398, 
12519, 7386, 16361, 29620, 19554, 17758, 29640, 29982, 334, 19032, 3033, 294, 1217, 23708, 17784, 12364, 23436, 17091, 3493, 14617, 10595, 31684, 26960, 18260, 31551, 28613, 13012, 21369, 4353, 9008, 20673, 3687, 27224, 8200, 18910, 13657, 6884, 2430, 23150, 25111, 10652, 3519, 28339, 11118, 32621, 10769, 9905, 10717, 10531, 29982, 18228, 13457, 28813, 25487, 15380, 27284, 4316, 15069, 4024, 23617, 2637, 9828, 31705, 26875, 22792, 8890, 30600, 9502, 4935, 13118, 26227, 23606, 12986, 5620, 19812, 879, 3371, 27024, 12298, 12365, 16478, 31184, 31740, 26525, 5435, 9743, 9467, 22700, 7726, 5656, 22135, 22710, 5327, 12600, 24149, 12961, 15038, 2967, 13552, 7915, 16849, 15815, 18014, 30690, 32626, 23198, 24820, 32275, 28482, 30529, 27916, 16644, 18691, 31106, 20997, 38, 11700, 8300, 11404, 6149, 12285, 31515, 14874, 20418, 15310, 16850, 7614, 6851, 8516, 17735, 25117, 8873, 18124, 26689, 
23735, 11650, 18058, 22373, 22124, 13376, 31484, 29517, 7486, 15723, 16090, 8411, 25432, 20498, 25665, 29645, 3920, 4871, 10001, 26513, 25001, 27724, 7828, 6746, 5020, 13512, 29280, 15987, 21271, 21566, 22142, 13780, 16391, 22912, 4811, 3059, 20179, 25312, 6559, 16860, 13352, 27368, 29101, 8324, 15868, 19787, 30506, 1370, 15821, 6170, 14386, 23840, 26666, 32059, 28775, 16633, 19829, 30744, 26587, 27075, 20455, 31636, 14640, 28070, 15060, 15427, 17149, 31725, 24369, 27354, 18548, 2837, 22867, 29412, 1346, 11556, 25593, 4535, 14519, 32317, 23693, 22951, 27687, 24944, 23719, 30073, 30864, 32726, 3283, 16411, 3964, 15838, 5268, 1170, 19241, 6882, 19369, 31283, 2536, 12030, 4238, 20758, 6339, 15137, 26694, 25288, 29026, 32612, 19288, 23360, 3888, 19355, 17432, 28180, 8121, 32298, 16935, 27629, 4694, 25883, 18237, 19513, 19213, 13677, 20774, 32543, 31923, 3246, 9483, 7096, 28243, 12492, 
24563, 15996, 12244, 552, 28809, 11258, 469, 21484, 24096, 3021, 29916, 7839, 244, 20427, 944, 16630, 4019, 7039, 11523, 17133, 9788, 16346, 20564, 20247, 10662, 7973, 21012, 22066, 11652, 3386, 19208, 4351, 15975, 32756, 18158, 21585, 13733, 9188, 22115, 27491, 31321, 10565, 30724, 27758, 21419, 
23858, 7380, 15227, 12370, 25367, 19422, 12150, 1879, 8806, 10523, 3461, 13851, 15499, 25493, 20120, 32667, 7969, 20173, 25408, 4339, 1638, 11098, 27076, 12065, 1004, 25300, 2674, 29196, 23954, 15088, 28211, 12485, 22707, 17388, 866, 780, 17821, 1582, 1246, 31766, 24389, 13096, 30558, 653, 21305, 
23934, 4357, 27097, 1493, 31851, 16183, 12446, 26298, 15969, 16042, 2181, 27004, 28399, 31168, 2880, 30363, 29672, 8468, 16584, 26805, 9666, 12882, 23273, 27129, 1852, 24909, 18945, 17887, 8259, 5963, 3845, 790, 23, 31907, 28356, 22974, 10922, 16523, 27248, 23000, 30025, 4907, 8538, 22011, 5757, 1526, 32765, 26184, 27956, 17977, 24638, 6048, 17180, 26100, 32498, 6932, 3664, 9962, 27297, 2460, 30262, 31732, 20361, 4108, 8103, 13466, 17638, 5957, 1105, 1764, 32625, 15528, 22874, 27502, 3367, 11985, 18758, 32699, 32331, 17025, 1307, 25291, 8110, 21467, 28867, 16368, 10798, 18388, 28337, 31709, 2941, 16869, 3784, 14336, 11300, 25090, 9336, 8210, 22215, 7888, 2090, 13804, 9386, 4115, 2014, 3996, 4980, 15717, 19218, 15288, 10291, 17710, 11750, 16370, 17313, 28624, 22399, 26093, 2982, 802, 4009, 19023, 3613, 27168, 6080, 25112, 219, 1249, 2768, 27186, 17133, 13513, 2299, 30024, 802, 30975, 12827, 3036, 12234, 12065, 13225, 4756, 5052, 19511, 28126, 27349, 17566, 8678, 29719, 403, 18016, 999, 27774, 16488, 2058, 25015, 4839, 5347, 7608, 10383, 25336, 546, 23522, 406, 11661, 28835, 14305, 16470, 7514, 12375, 4527, 5484, 28371, 24824, 19183, 22916, 24392, 13469, 20269, 1157, 5973, 16524, 29030, 9481, 5241, 20559, 17099, 27664, 22021, 28426, 18114, 8437, 20792, 6923, 10286, 4513, 28840, 22435, 21488, 21246, 8931, 4404, 7342, 26030, 15447, 1932, 19410, 4862, 12399, 12913, 17366, 5653, 26111, 21629, 6080, 25970, 10978, 12333, 15336, 12437, 2786, 4916, 13313, 26107, 3543, 11285, 
25175, 21840, 8467, 24048, 23638, 16865, 12286, 1692, 26700, 31056, 12286, 27383, 2160, 17035, 9114, 15738, 14114, 14590, 22750, 29457, 14452, 26632, 26369, 23081, 9450, 15020, 12101, 10250, 4478, 5002, 25887, 28775, 30951, 8461, 24984, 15155, 18971, 16869, 17907, 11447, 16403, 3512, 12688, 29666, 26318, 22036, 3856, 29408, 29080, 13225, 15546, 21998, 18060, 29621, 5149, 3180, 25432, 31167, 5367, 22579, 32576, 27016, 14166, 26410, 3686, 11583, 10493, 11028, 2632, 11252, 31241, 25516, 9098, 17487, 31957, 3828, 16630, 24450, 23834, 13258, 28609, 12412, 12891, 15036, 10511, 29535, 4480, 18717, 4282, 16693, 25025, 21080, 4431, 19423, 30917, 21381, 31066, 5709, 16907, 27962, 32228, 31989, 30090, 20388, 17977, 8829, 8596, 11478, 25839, 5307, 3072, 9568, 25123, 15840, 11912, 25380, 15110, 30192, 21104, 22117, 31385, 18550, 3945, 18721, 20404, 17013, 12724, 15521, 17485, 23713, 19338, 17742, 31223, 21967, 30140, 22726, 4009, 4523, 919, 16943, 5313, 20393, 11786, 12492, 11592, 20030, 31243, 5325, 19320, 11855, 24118, 15980, 8827, 10986, 27575, 29493, 13942, 31028, 32363, 28069, 11718, 25762, 14402, 31479, 18314, 31596, 19432, 11067, 7009, 24383, 23204, 18344, 1653, 3635, 27008, 819, 27064, 14332, 12714, 6497, 7533, 29540, 20506, 20313, 15851, 26617, 6261, 2877, 13725, 16386, 3889, 30138, 10318, 30392, 20219, 23006, 9123, 22195, 
23893, 14122, 14569, 15523, 12932, 14825, 25617, 29248, 30889, 3520, 25593, 13700, 17966, 16005, 26606, 16407, 22371, 6996, 13934, 25355, 2921, 20448, 12594, 2761, 10320, 10248, 23148, 16203, 10876, 12715, 16205, 29836, 9037, 12476, 27594, 16189, 27391, 6553, 19360, 16826, 10702, 1432, 7317, 25916, 31838, 21987, 22017, 13136, 14171, 30855, 10638, 25480, 3676, 967, 316, 29040, 8718, 7094, 7848, 20163, 14734, 22021, 16269, 1503, 11030, 4121, 27531, 24695, 14300, 27488, 20263, 26248, 24375, 25574, 18452, 18830, 27908, 13603, 1713, 4087, 18248, 280, 26834, 5336, 16151, 28058, 29123, 12255, 26804, 11245, 906, 6537, 16121, 7828, 15725, 24468, 5625, 4456, 9140, 32184, 8421, 14312, 29872, 28306, 3884, 26064, 20220, 18657, 1254, 13805, 3331, 15604, 29299, 4911, 31170, 1635, 3935, 22528, 17104, 9726, 31881, 30676, 19355, 30723, 20869, 26369, 17908, 31380, 6462, 13522, 13262, 22631, 480, 3030, 13890, 3008, 17397, 3198, 19927, 11676, 1230, 13799, 28673, 17711, 14372, 20725, 5607, 11153, 17663, 4513, 10345, 22453, 29143, 25236, 28002, 9882, 23545, 3828, 23082, 29637, 32301, 15998, 28512, 5614, 2710, 30677, 486, 5114, 7129, 7449, 5420, 9769, 386, 5820, 10930, 22417, 11171, 8337, 10952, 23499, 31165, 27942, 19097, 27884, 28900, 4948, 4967, 17846, 7455, 31252, 28440, 3088, 8718, 13972, 24050, 16308, 16079, 4235, 14755, 296, 18721, 8393, 10628, 17647, 25546, 15890, 11294, 18176, 29751, 11308, 23022, 21111, 7011, 16695, 17765, 12683, 13818, 30013, 7219, 22976, 10173, 4106, 28101, 10333, 30248, 26942, 15116, 17185, 30290, 28320, 13185, 28978, 4630, 25781, 17254, 86, 26736, 5522, 22350, 2661, 19753, 25070, 30943, 12031, 27575, 26747, 10455, 5498, 4447, 14199, 6733, 19230, 25244, 15485, 13114, 20885, 32708, 26274, 30263, 29085, 23785, 11965, 14728, 9728, 20733, 31238, 20314, 12998, 8250, 2787, 841, 15529, 1473, 29694, 4389, 29897, 130, 16795, 30966, 11425, 26459, 19753, 21565, 26170, 2180, 28438, 4221, 13470, 22570, 744, 13050, 144, 29274, 29066, 2497, 1402, 29729, 13795, 28136, 6823, 28658, 4013, 31511, 7346, 327, 22661, 24648, 2879, 17291, 12094, 11722, 12008, 12344, 28027, 17548, 23419, 10301, 7037, 19096, 8802, 11426, 22073, 18654, 2402, 2670, 23470, 22067, 6537, 32201, 12661, 29593, 23137, 4190, 6554, 32193, 3434, 14083, 18858, 22478, 15815, 29340, 6157, 13148, 30776, 30780, 5014, 6593, 16200, 9358, 14681, 6802, 4040, 15988, 15549, 17258, 2427, 19693, 5586, 
17638, 4115, 1084, 18916, 26868, 30812, 3655, 8784, 15950, 5560, 12861, 17814, 7489, 15307, 8059, 26288, 27059, 2167, 24497, 32418, 13924, 2571, 13376, 17491, 11636, 5559, 25319, 22171, 25126, 25156, 13727, 19613, 28643, 15105, 12739, 8279, 2690, 24321, 19060, 10103, 25542, 24707, 4668, 3696, 2600, 6322, 12273, 2510, 9431, 911, 6877, 12742, 12542, 6187, 25115, 15378, 9285, 28953, 836, 2044, 6298, 22819, 5196, 12472, 25905, 4156, 17574, 6646, 18633, 23734, 31151, 10936, 2354, 15541, 2633, 10849, 11276, 19428, 24006, 29711, 11473, 12646, 29193, 29739, 21526, 10768, 3303, 9279, 5133, 725, 7379, 30983, 3663, 6017, 3259, 30410, 9944, 10667, 3885, 24554, 18515, 9188, 9406, 12731, 15769, 7477, 25004, 25489, 17524, 12489, 14018, 7197, 15784, 32230, 16764, 20729, 7732, 25634, 26476, 1153, 1493, 20435, 16604, 5605, 7884, 10951, 5813, 22396, 10977, 17717, 30624, 24411, 25000, 19188, 10346, 17959, 1027, 6379, 29613, 18471, 18664, 1737, 7341, 31901, 1892, 30966, 31104, 5975, 16864, 20169, 30834, 26753, 30372, 251, 5287, 3773, 22937, 1115, 32258, 3958, 23379, 17604, 30790, 18800, 8526, 19532, 13691, 30116, 21368, 27327, 12180, 10828, 25328, 29004, 17742, 5178, 11790, 22141, 7771, 23149, 
9635, 22125, 6848, 24550, 22402, 25397, 20860, 22456, 575, 31143, 25194, 24415, 5686, 11839, 8040, 4946, 18383, 1622, 20665, 20956, 5889, 29081, 6312, 8231, 28693, 30650, 14958, 26010, 18861, 28261, 18518, 29028, 25604, 19318, 32031, 32345, 3447, 26473, 17570, 10494, 4165, 17425, 14261, 3039, 11667, 11149, 3918, 30249, 18867, 15225, 21228, 28788, 11685, 12385, 17970, 993, 478, 1403, 22997, 30565, 26185, 15509, 9145, 30564, 19340, 25164, 8791, 
23426, 29068, 8831, 20322, 32438, 12083, 259, 17834, 23968, 26481, 2712, 32320, 28444, 20352, 4636, 26843, 27415, 27245, 19967, 25466, 29601, 24020, 
27127, 21835, 21572, 1003, 24821, 28876, 19348, 24257, 13143, 24880, 4872, 20680, 19807, 26372, 6408, 16018, 12772, 10258, 8519, 32216, 15687, 13958, 16211, 13760, 5289, 4943, 24427, 5215, 5467, 12232, 20880, 32125, 22678, 12952, 2782, 5785, 8045, 983, 4381, 21549, 15103, 25714, 17556, 27700, 17649, 5328, 31773, 20968, 15388, 20149, 10111, 7888, 22914, 5735, 27639, 3322, 12679, 10000, 28440, 26246, 30046, 32356, 17366, 3684, 26817, 19331, 11741, 1629, 24549, 17697, 12071, 5720, 22957, 10980, 5069, 30934, 2590, 30221, 28701, 12480, 26899, 32091, 17646, 27746, 6449, 4140, 15920, 6583, 15134, 19686, 16327, 4071, 238, 13973, 13466, 29198, 5598, 19926, 21478, 12095, 11845, 12531, 20697, 17353, 21447, 1871, 10332, 8120, 16844, 15365, 304, 22175, 26160, 19404, 21052, 31893, 23101, 10782, 17189, 21630, 26582, 409, 31520, 13196, 28404, 21413, 20996, 15877, 16215, 15191, 6052, 24902, 14965, 
22421, 25947, 12040, 20919, 8315, 11752, 32226, 13540, 11262, 32636, 29455, 17629, 9679, 11282, 22898, 7820, 32386, 19455, 27095, 21015, 5616, 20170, 26748, 6745, 25818, 3645, 15312, 10386, 27087, 6076, 24698, 22621, 23887, 8150, 24221, 24547, 28976, 21530, 9306, 20559, 8001, 32556, 27031, 31362, 
19246, 13080, 255, 3079, 15267, 28133, 14922, 30793, 11956, 27758, 14783, 515, 3453, 8045, 26871, 30969, 773, 30425, 25827, 32742, 31337, 30578, 3345, 28341, 18486, 20122, 6186, 9459, 790, 22630, 20928, 24709, 20399, 19445, 25926, 27798, 9160, 512, 23136, 15572, 17581, 2483, 9822, 18652, 1237, 32699, 30466, 15346, 1219, 23457, 6794, 19702, 31530, 10070, 10474, 21139, 18516, 21775, 21082, 26554, 22724, 10066, 30480, 13391, 6939, 24401, 27727, 11810, 3384, 9592, 4768, 26144, 9379, 24642, 8544, 13771, 5676, 27984, 19322, 24807, 16591, 28860, 8566, 32630, 16347, 11947, 21683, 17383, 26708, 8993, 16368, 29067, 13717, 19482, 22801, 5960, 26937, 22998, 28704, 25233, 25148, 14708, 24467, 7829, 28510, 11714, 4557, 13239, 8392, 27220, 32743, 15167, 23794, 25811, 3503, 31567, 15556, 20632, 26353, 24344, 29436, 30841, 16886, 16205, 17103, 27363, 11083, 3800, 18899, 11306, 16067, 16333, 8476, 25372, 29119, 29852, 6565, 13276, 21165, 20874, 6130, 15598, 25039, 610, 21236, 27278, 26430, 18535, 31277, 5190, 27182, 9358, 1813, 6335, 11635, 29162, 15803, 27608, 21829, 1128, 8367, 19189, 6720, 8124, 23584, 2969, 11694, 23195, 27714, 14392, 13065, 16939, 754, 28486, 29372, 20920, 28829, 14484, 10794, 4776, 5214, 17628, 7409, 30897, 5990, 19355, 19312, 20041, 30625, 31518, 29319, 17758, 9623, 12000, 14493, 72, 14736, 24595, 11240, 9980, 1019, 1149, 30184, 23682, 32016, 20357, 26677, 10409, 22453, 2446, 18043, 10745, 15262, 29059, 29123, 9193, 27321, 23731, 22772, 15698, 21961, 2272, 21145, 804, 25680, 21650, 17380, 856, 29619, 20913, 14579, 5157, 20889, 26195, 21075, 7031, 13716, 28627, 11203, 27293, 32259, 7203, 8250, 577, 13367, 28003, 3883, 21150, 7124, 7090, 1799, 19437, 20858, 18756, 30980, 21280, 15525, 15540, 23069, 28371, 22738, 5532, 21849, 16512, 6628, 12132, 29521, 7666, 28613, 9815, 23276, 24316, 11600, 13052, 3950, 13162, 22127, 20387, 20401, 5432, 6528, 23614, 31409, 11010, 30718, 13426, 7503, 11964, 25181, 27630, 3406, 11427, 19253, 9468, 13730, 11891, 30115, 13653, 30698, 9947, 749, 3386, 18235, 12590, 868, 5312, 24607, 31067, 3727, 29548, 16861, 24607, 9861, 30207, 19707, 12153, 27291, 1683, 11010, 29535, 23871, 27367, 25473, 19119, 16676, 15608, 16980, 17512, 20896, 20945, 29478, 7450, 23122, 675, 30261, 28827, 29191, 3096, 21077, 13308, 23774, 30693, 10296, 3003, 22955, 17567, 2796, 21050, 24218, 16335, 16805, 25200, 2325, 17992, 22205, 31455, 
17639, 24248, 6137, 19654, 28321, 25214, 27662, 2967, 30012, 10427, 8548, 4267, 16129, 26540, 6681, 26421, 21926, 16439, 31049, 21621, 7610, 10179, 13709, 12334, 7491, 9293, 13505, 8537, 5541, 3768, 21771, 4891, 29893, 20325, 1816, 30197, 24943, 18692, 23977, 8507, 26357, 26026, 13903, 26823, 1049, 31267, 24434, 15086, 8493, 29577, 24472, 23219, 12665, 789, 16868, 2619, 989, 15414, 3037, 14721, 1720, 22752, 16498, 3403, 776, 6183, 5178, 21085, 4818, 27404, 14080, 12524, 22212, 25495, 22142, 13397, 12057, 6694, 15977, 31503, 31677, 32004, 14766, 8926, 10161, 15933, 6396, 17738, 946, 21425, 
642, 6224, 13333, 15720, 28410, 1879, 13814, 1573, 30694, 22630, 16273, 12862, 23321, 12691, 32752, 4266, 22394, 4799, 455, 8796, 18181, 6016, 13724, 3023, 6674, 5471, 26410, 17635, 6106, 27204, 8712, 31463, 2103, 3886, 18822, 22775, 10923, 17191, 26584, 10888, 7844, 25208, 30838, 3137, 8446, 15897, 12738, 7949, 17098, 1899, 4587, 29038, 32078, 9257, 13074, 4884, 18252, 32412, 10924, 1710, 3976, 9743, 30760, 1536, 16516, 21379, 18129, 19509, 12686, 9892, 1781, 23159, 10492, 12027, 8775, 27326, 21431, 5476, 20354, 1253, 22006, 31171, 18767, 27139, 22860, 22771, 27753, 18936, 15333, 3839, 255, 30534, 17677, 18837, 13146, 3363, 753, 32439, 32703, 15308, 13738, 15284, 5527, 12059, 27511, 24663, 30157, 17244, 12874, 6750, 20600, 31837, 647, 13613, 26042, 29380, 18184, 4548, 28135, 11173, 9828, 23279, 19690, 3668, 29041, 18876, 5349, 27768, 23303, 3634, 7192, 20577, 23815, 12352, 10756, 
1436, 28316, 31988, 32720, 4036, 28609, 21486, 16363, 922, 28164, 26899, 30963, 30296, 9865, 20102, 22486, 30531, 26961, 23252, 17719, 18304, 16828, 
16238, 29203, 17448, 2125, 25437, 6052, 13983, 16814, 22065, 28293, 32545, 28404, 28474, 8472, 19869, 13091, 27899, 15653, 23751, 29173, 10460, 26819, 25449, 19415, 13087, 24188, 12281, 6965, 27413, 29868, 8817, 22263, 26514, 13354, 30811, 32332, 17310, 16938, 7979, 29094, 9069, 8546, 210, 23814, 
1426, 3692, 32400, 6009, 13423, 31596, 3594, 7138, 27632, 28402, 11420, 32507, 1913, 18978, 7408, 1687, 19484, 14866, 8912, 17962, 8976, 22643, 12600, 25738, 22622, 16244, 16048, 28407, 12766, 5347, 13272, 23898, 29282, 20629, 10309, 11210, 7473, 16905, 24971, 11604, 3511, 6472, 18587, 31740, 14202, 30479, 18768, 10751, 8784, 18480, 20548, 6235, 30416, 28726, 23272, 5777, 12038, 1864, 19924, 12202, 16235, 12112, 1371, 18552, 19475, 17500, 21603, 29470, 15913, 27716, 25971, 7123, 19865, 18829, 12814, 29410, 21260, 21901, 1088, 14325, 30233, 9680, 13942, 19092, 3001, 8379, 9619, 9193, 14588, 25967, 2367, 7622, 11771, 27376, 9858, 10985, 3342, 6791, 4243, 25726, 21055, 26980, 27626, 4325, 20222, 13704, 26524, 1974, 3606, 27106, 24808, 5890, 13279, 11704, 25869, 19932, 11957, 9033, 1375, 20504, 19370, 31153, 12698, 5971, 888, 22028, 3190, 17716, 5050, 22494, 28284, 27376, 14427, 15539, 2839, 27156, 6478, 26370, 27630, 21119, 16511, 19543, 13937, 25005, 11274, 3761, 28594, 1852, 20652, 17705, 12919, 4776, 8310, 14293, 2957, 28250, 27081, 4844, 28767, 3041, 8830, 21803, 967, 25983, 29541, 32119, 7459, 14567, 6129, 15299, 17836, 24389, 26161, 10548, 8195, 26239, 4866, 19331, 28173, 20410, 1668, 26532, 10497, 5921, 21706, 26533, 24511, 26849, 11990, 22488, 20324, 10104, 24516, 16180, 27163, 10032, 10821, 22265, 16438, 17126, 6735, 26003, 32637, 11792, 7955, 16577, 31941, 10239, 304, 15094, 31685, 29793, 2342, 0, 10534, 15625, 27149, 9447, 31449, 16627, 17543, 28440, 27309, 
29826, 22003, 5826, 16161, 30477, 10211, 2177, 22134, 410, 21456, 27194, 10249, 13033, 12045, 26438, 28640, 23733, 29434, 2002, 14467, 13878, 13690, 
6021, 14093, 6122, 17831, 24420, 11650, 9365, 16580, 14067, 18275, 903, 29554, 12445, 9344, 4125, 23335, 25942, 1550, 8842, 23517, 9087, 20985, 21975, 32263, 1290, 24700, 28457, 18633, 12510, 18414, 19011, 3176, 19325, 6879, 28491, 12544, 23268, 19555, 13777, 23925, 8627, 11950, 6413, 2731, 13709, 16353, 8552, 22266, 21698, 14628, 1855, 11740, 16171, 5109, 29411, 6121, 5718, 31167, 32228, 18182, 2275, 20911, 22927, 13017, 19758, 24771, 16053, 
22912, 12079, 12324, 2734, 30850, 13726, 11701, 11678, 20997, 8794, 15084, 19959, 21058, 21003, 7649, 17727, 10551, 16134, 2212, 23060, 11419, 11122, 10964, 23405, 5655, 13993, 365, 290, 29107, 25057, 22754, 13743, 20623, 18444, 13676, 11573, 5075, 3325, 5537, 28097, 25576, 18379, 17224, 11473, 10217, 27770, 9836, 9748, 4436, 30936, 20143, 20338, 4102, 26790, 9953, 3660, 16998, 13560, 1745, 20997, 13792, 25311, 5987, 14273, 2965, 25924, 15587, 7020, 21840, 22039, 31641, 14847, 16060, 19114, 2718, 18686, 22229, 18263, 2286, 10053, 3485, 5737, 2237, 2821, 14864, 1594, 25871, 20746, 15449, 21144, 5507, 20799, 4166, 15725, 29807, 23667, 25594, 6815, 11058, 18269, 1762, 21302, 14534, 9950, 17642, 9149, 18069, 8583, 496, 6634, 16270, 31323, 
10616, 5505, 23927, 14550, 18082, 20597, 8325, 4654, 22618, 12880, 25898, 30680, 13775, 29398, 3118, 28494, 5926, 20453, 26881, 5904, 5743, 23200, 27216, 31976, 15576, 8141, 12502, 10611, 28704, 12154, 2165, 1245, 21583, 18407, 30597, 30956, 30117, 10144, 22636, 29760, 20176, 19178, 12654, 13017, 
32610, 6240, 16071, 28633, 18049, 16606, 25335, 25739, 5600, 22174, 29022, 14501, 20719, 24481, 1800, 18378, 3151, 26449, 26058, 24659, 24969, 21348, 1422, 24399, 11007, 3, 20459, 19912, 15395, 26412, 14841, 25417, 27110, 22357, 12387, 4508, 30580, 32082, 2493, 32216, 15134, 17784, 29464, 2716, 3991, 22531, 2772, 22421, 25956, 13493, 7606, 23110, 2190, 12736, 14906, 29704, 28314, 25062, 3627, 10575, 8378, 9695, 17008, 24112, 5701, 27899, 18729, 15392, 4965, 26888, 20987, 9471, 24592, 14710, 22695, 22357, 27449, 20921, 482, 10203, 11847, 7919, 14945, 29757, 25798, 12483, 19507, 13086, 27740, 27025, 24147, 17756, 24831, 31179, 4734, 27798, 18790, 10907, 13634, 2796, 26557, 15305, 13400, 4102, 669, 22752, 20275, 14168, 14907, 27020, 13785, 31652, 15840, 16711, 2546, 25536, 30105, 29236, 30238, 3225, 29743, 18251, 20364, 5240, 17753, 10679, 30153, 19332, 27697, 30076, 25813, 19849, 9701, 349, 11644, 26871, 17583, 24061, 18403, 30510, 14087, 4164, 29794, 2552, 3863, 19204, 7825, 4695, 7791, 27613, 30374, 25730, 31226, 16222, 13566, 
15658, 31280, 20588, 15353, 11265, 2958, 18152, 3083, 1917, 25411, 6540, 15888, 19929, 27693, 5910, 30688, 5982, 3, 2729, 3876, 32224, 16596, 32624, 
20072, 7563, 9904, 26500, 4209, 4832, 5541, 10768, 9680, 6650, 4077, 23731, 14519, 13078, 22629, 11301, 8972, 28754, 6465, 14366, 27324, 20661, 25342, 26227, 22610, 19568, 6041, 29058, 23496, 30307, 5631, 13777, 13212, 22243, 14788, 754, 2599, 25531, 791, 29610, 32043, 14704, 31478, 4434, 17323, 31178, 10142, 18044, 26111, 29583, 9542, 25818, 15399, 30610, 14092, 16988, 9824, 32492, 25648, 12697, 13301, 1674, 30080, 22896, 11352, 17384, 26387, 12271, 11889, 5915, 8762, 7283, 23094, 24085, 5044, 1297, 14460, 3365, 29217, 19253, 21772, 12477, 18617, 31625, 16122, 15480, 6718, 13593, 25394, 19291, 12335, 2996, 30036, 13660, 27199, 27029, 23234, 7712, 8710, 13379, 19447, 24841, 30453, 14517, 8218, 32368, 5775, 8890, 30418, 28207, 21718, 920, 13405, 31587, 10500, 11251, 988, 3440, 25212, 23793, 21489, 581, 10752, 5276, 396, 32225, 8996, 31112, 9474, 21269, 16899, 10677, 13664, 27020, 10544, 28854, 30206, 17674, 9200, 10515, 25175, 4593, 4262, 19693, 3095, 23305, 20366, 31200, 8054, 19584, 2478, 27694, 453, 10288, 25610, 13593, 15942, 20257, 29464, 12432, 13633, 1103, 627, 32270, 16724, 19629, 1235, 192, 18187, 4201, 16445, 10982, 25265, 24946, 2679, 6267, 10341, 2872, 10687, 15640, 10864, 20403, 11708, 10518, 14805, 30118, 21685, 10739, 5418, 3109, 20737, 18934, 31143, 1877, 703, 29462, 19069, 6771, 31175, 14617, 17000, 29463, 21472, 3833, 25480, 14778, 19251, 27531, 6509, 31606, 2303, 8546, 16753, 24846, 4239, 28146, 3402, 22318, 22121, 1009, 29663, 3060, 22473, 5379, 9307, 26030, 17997, 7829, 12160, 22246, 7154, 32265, 23359, 13212, 11071, 4116, 21637, 27602, 32704, 24421, 13143, 20302, 8886, 9864, 1313, 16027, 6157, 10505, 20811, 27985, 10126, 10204, 19470, 6550, 18006, 29948, 11142, 23781, 13447, 27219, 21256, 31246, 9021, 18394, 18613, 19582, 30404, 15617, 10575, 15553, 30984, 8529, 3660, 24133, 4172, 8272, 6697, 6753, 19999, 23717, 7937, 3221, 27276, 20092, 4958, 29716, 32658, 24876, 18767, 24191, 6356, 5143, 7099, 28660, 27536, 8914, 1524, 27719, 19157, 30855, 22927, 25999, 11249, 29335, 1652, 13285, 20265, 13955, 10545, 6760, 24750, 7948, 21396, 15749, 9676, 1177, 17272, 20085, 2659, 25818, 31711, 4102, 8859, 11691, 29761, 6303, 29908, 12091, 21028, 30078, 8156, 31085, 24813, 4933, 12645, 10366, 15350, 4021, 16566, 25833, 24288, 22713, 8608, 6791, 4139, 15526, 17332, 11003, 23043, 20417, 4531, 8013, 1373, 19202, 25926, 7381, 19267, 18455, 
25327, 8539, 12396, 32428, 21056, 19068, 16144, 26346, 17995, 11343, 4858, 25917, 10841, 31561, 27615, 25435, 1759, 3422, 14830, 31362, 4781, 30313, 
22696, 4864, 25705, 17358, 27634, 7417, 22588, 7006, 4969, 18021, 32203, 16763, 26613, 21080, 8809, 19068, 30625, 30086, 19338, 31571, 13226, 23558, 
13691, 7532, 1237, 15446, 10833, 18905, 31238, 7072, 17696, 28589, 17679, 10043, 30061, 6565, 31174, 18293, 22245, 14094, 17242, 20368, 12623, 27618, 999, 28426, 13503, 11317, 4679, 18466, 17932, 9935, 2604, 20375, 28549, 17179, 25195, 22963, 18912, 13888, 15771, 30856, 29043, 29581, 10463, 3962, 
23463, 31770, 15616, 16381, 8361, 20908, 21951, 5024, 3426, 4314, 21353, 1867, 4522, 30318, 6827, 23492, 24248, 21518, 18088, 20344, 18909, 14364, 16713, 9593, 18291, 19674, 13780, 7619, 4624, 13010, 4545, 17091, 20991, 23157, 1993, 12314, 22768, 8450, 18751, 13982, 17902, 13481, 27043, 417, 9618, 1009, 8309, 8567, 25206, 15447, 23879, 7986, 6637, 7223, 25110, 32176, 10481, 7152, 22490, 19416, 1373, 12868, 4444, 11296, 14173, 14333, 28744, 30034, 1826, 11990, 8323, 20625, 13018, 28568, 7614, 30871, 16607, 900, 14156, 32320, 16942, 11505, 1584, 13900, 6428, 25398, 2427, 13408, 6212, 17866, 
23765, 30543, 3524, 19114, 15705, 10904, 3753, 11259, 20646, 8496, 5799, 22769, 25138, 28033, 20494, 28143, 2786, 15026, 6137, 30704, 30424, 19241, 4808, 1829, 15757, 16462, 25809, 21727, 31, 3986, 25427, 176, 16876, 18609, 20907, 10445, 12127, 4403, 32459, 25015, 18186, 31033, 22247, 20763, 6389, 3446, 15729, 28662, 4150, 19068, 17224, 14332, 31426, 21817, 3373, 16443, 17283, 7361, 32374, 3324, 4779, 18766, 31750, 5866, 18503, 7300, 23420, 19830, 1303, 9978, 21163, 6265, 13725, 30455, 31563, 7451, 21364, 9337, 16109, 18933, 20707, 24188, 16181, 28274, 25266, 23928, 3651, 24955, 7228, 24364, 19314, 31571, 4550, 3994, 30789, 26303, 29967, 851, 6558, 3435, 24616, 9972, 31025, 9097, 17030, 18417, 6969, 5819, 9302, 6801, 15465, 25651, 13328, 24890, 27686, 6680, 21071, 6383, 5875, 2092, 4064, 20247, 5421, 25517, 21017, 1152, 4600, 25209, 4460, 16803, 24185, 4469, 26172, 16426, 1350, 27182, 22510, 19887, 12826, 27585, 8772, 19399, 16846, 15097, 25830, 28991, 3716, 3512, 28994, 12453, 19494, 26008, 10902, 26634, 2319, 24017, 11339, 15879, 9991, 4190, 10885, 20478, 24693, 22107, 16632, 5538, 11728, 26546, 9213, 7610, 8023, 7670, 26597, 2082, 32514, 24207, 21133, 24850, 20152, 28696, 27442, 16802, 30402, 16133, 15495, 22926, 14464, 21897, 32005, 17975, 14682, 2743, 4483, 23275, 14842, 11495, 7686, 15974, 19896, 11099, 6362, 409, 9814, 802, 5090, 5034, 18414, 29501, 12332, 14139, 14632, 15361, 28616, 23791, 944, 28092, 23003, 1834, 6376, 2715, 9455, 6937, 28378, 32715, 23437, 17139, 26992, 14815, 12046, 17790, 25575, 22642, 27822, 30420, 28289, 17677, 18658, 9831, 5242, 12619, 29932, 11843, 15934, 16442, 12972, 1939, 985, 24325, 23225, 2151, 943, 4304, 2224, 11956, 4461, 12772, 25036, 7324, 20799, 30220, 10679, 10736, 4932, 9790, 6560, 12020, 831, 24958, 11662, 27746, 143, 25856, 23540, 13489, 12897, 8077, 27525, 14998, 11300, 5159, 23369, 10444, 13885, 20464, 4337, 26385, 3836, 30536, 16744, 12401, 14287, 11830, 
18346, 24262, 8886, 24585, 24025, 3968, 21495, 10815, 27790, 1442, 19475, 28325, 25709, 27917, 19960, 20672, 22012, 25345, 21880, 8812, 15285, 26593, 20986, 963, 10841, 7734, 31088, 14912, 23432, 31479, 18313, 804, 18063, 19208, 32039, 25881, 15233, 12800, 13331, 17686, 13449, 1583, 23280, 17026, 
20862, 11744, 11629, 7836, 12728, 25051, 31935, 13082, 8226, 31022, 23631, 15376, 17809, 8749, 1711, 30996, 21844, 11448, 3795, 27040, 26637, 18876, 
12670, 10424, 30911, 25596, 23290, 11212, 14375, 30226, 13580, 26847, 10832, 432, 20775, 10217, 16994, 3116, 17120, 890, 28858, 17468, 16034, 23713, 
22336, 13566, 4259, 17932, 6133, 10811, 22, 10864, 29132, 10732, 29347, 12844, 8123, 9981, 25620, 11305, 11793, 20818, 1617, 32260, 14858, 9992, 7566, 24431, 20385, 11005, 27843, 25812, 22949, 25746, 18012, 7484, 22543, 3247, 5426, 18288, 20627, 3080, 29115, 25181, 11637, 11935, 6013, 7357, 32414, 12426, 20169, 26612, 20719, 2039, 7845, 12856, 4053, 4205, 23306, 3061, 9502, 31573, 25424, 15472, 19211, 10680, 9446, 2474, 17574, 21322, 13894, 14215, 28757, 7848, 7720, 559, 26800, 3806, 6902, 6069, 10128, 27180, 32385, 21751, 24424, 32266, 29170, 18885, 32473, 25705, 13827, 18501, 4736, 11836, 13167, 917, 30995, 5943, 28582, 435, 7596, 9942, 14790, 25754, 11364, 25250, 9159, 20142, 29988, 30128, 7157, 26202, 28856, 29034, 15012, 15608, 7205, 2961, 6175, 7409, 7741, 32131, 16097, 805, 27504, 26810, 3592, 18317, 23525, 25750, 8198, 14622, 26570, 6492, 2458, 12529, 32232, 3198, 1279, 24738, 10362, 541, 23907, 24566, 29759, 6092, 11930, 15808, 19918, 31895, 19732, 6149, 18730, 27204, 27148, 32606, 1942, 17368, 18435, 10654, 12202, 32093, 4973, 14261, 11175, 12515, 13226, 4820, 8712, 1221, 10295, 9426, 23641, 18221, 17958, 28623, 4172, 25306, 27083, 18711, 16138, 4385, 28857, 15176, 7879, 27954, 4077, 21432, 17049, 19613, 23112, 24337, 29834, 277, 2883, 22846, 30188, 26483, 27102, 5259, 6636, 26622, 22489, 23559, 28266, 19433, 
24871, 5421, 26376, 3101, 24480, 9412, 16001, 32057, 1782, 6916, 573, 31959, 27882, 27386, 31778, 1042, 25023, 12590, 28332, 17221, 11503, 19842, 22336, 11028, 542, 21597, 10941, 1713, 16972, 6921, 16469, 2904, 23886, 25434, 24219, 284, 26495, 27281, 7900, 26854, 14259, 24447, 6835, 17339, 8556, 1006, 6104, 24381, 8017, 32060, 9785, 19317, 475, 6217, 25676, 24015, 30290, 1172, 23971, 25958, 31224, 19104, 14273, 29826, 3460, 413, 8492, 25439, 15569, 2116, 14019, 28721, 20184, 17667, 21330, 8292, 12764, 12634, 32100, 18216, 30692, 13445, 26456, 21805, 30574, 4443, 13751, 21931, 25698, 27510, 32709, 15526, 30021, 10132, 15958, 27248, 26799, 11069, 7395, 2159, 32511, 16294, 24797, 8992, 15437, 7126, 23361, 9564, 1696, 23047, 6253, 6363, 29793, 23631, 16946, 20470, 24336, 25727, 26666, 23729, 3638, 25420, 8780, 30968, 3739, 17068, 16829, 17449, 2488, 12163, 1001, 31187, 12655, 9855, 31699, 1470, 5114, 18496, 9641, 6443, 27682, 14525, 22684, 9564, 16817, 3555, 2799, 24407, 28201, 4479, 7245, 12520, 22966, 23133, 6751, 15077, 1122, 177, 13214, 19637, 12168, 29111, 19558, 29971, 15243, 9879, 27212, 4112, 3527, 17035, 27058, 30295, 4808, 23619, 12697, 12725, 12474, 30345, 22966, 23257, 15905, 27681, 30407, 1112, 20683, 21235, 295, 22260, 30978, 6764, 2464, 17181, 15622, 26913, 12417, 27576, 26810, 32181, 4849, 11808, 1437, 5885, 8835, 27498, 3836, 10083, 6923, 30446, 13926, 22408, 2735, 19970, 19553, 7214, 8257, 32009, 8539, 25428, 13260, 21933, 29411, 7330, 15724, 23144, 14617, 8456, 11875, 841, 26723, 15779, 24682, 16373, 31586, 26080, 3909, 23276, 22821, 20707, 4250, 8717, 27548, 1578, 15875, 30813, 31311, 7533, 17762, 13572, 7503, 13769, 21365, 29592, 23661, 26654, 19626, 14750, 20139, 14518, 2100, 5454, 19952, 19495, 16734, 6551, 4864, 25466, 13087, 23395, 19882, 25484, 4591, 21532, 3396, 27573, 22490, 19823, 3412, 16296, 5843, 14928, 14992, 2202, 17738, 8510, 1033, 12711, 14593, 31688, 19619, 25457, 17435, 
12112, 4296, 25354, 10358, 783, 5213, 22548, 21818, 14169, 11509, 15910, 8882, 8738, 31813, 1394, 91, 29890, 11993, 9893, 18747, 3829, 4869, 11791, 12916, 806, 7197, 516, 2073, 12269, 9704, 26754, 11328, 4822, 3155, 4115, 3161, 14436, 27491, 8181, 190, 27989, 7021, 4985, 19083, 5416, 15753, 25769, 9135, 18909, 27716, 18989, 5443, 10492, 25749, 3184, 2075, 29144, 15123, 13822, 17307, 22805, 29028, 9009, 20172, 13672, 32761, 13580, 26543, 27038, 10232, 11111, 1234, 12256, 8570, 27212, 5408, 10805, 31223, 11938, 29181, 23624, 14078, 30216, 14227, 29292, 4394, 7684, 30566, 31197, 23377, 32349, 31023, 28232, 27134, 709, 32231, 16526, 3874, 1979, 14626, 15046, 32262, 32432, 29854, 25985, 11140, 7529, 4636, 21073, 32375, 7332, 24430, 28556, 25712, 18942, 28882, 18765, 7851, 28948, 30078, 23484, 23361, 24553, 14972, 23183, 28318, 2696, 20408, 4561, 16694, 4586, 856, 17378, 17780, 12825, 10059, 10432, 2547, 23446, 21797, 29316, 15345, 31736, 9258, 31536, 11777, 14807, 1448, 32679, 14079, 10216, 15243, 3069, 32073, 13161, 7467, 31985, 556, 20928, 7784, 15032, 413, 12639, 19705, 4349, 31274, 29162, 14337, 18469, 28976, 10140, 30179, 25559, 18253, 11751, 15448, 10940, 12568, 3418, 16063, 23427, 10256, 30920, 18100, 13097, 26579, 9639, 15075, 10359, 19345, 950, 2078, 204, 8127, 6115, 8366, 8732, 15376, 32363, 1511, 17977, 31137, 22595, 4096, 29521, 22899, 10167, 26657, 23992, 28447, 24657, 26812, 5864, 25541, 11772, 22561, 11719, 9542, 14185, 12621, 9256, 5555, 24498, 28419, 23955, 20229, 19261, 3359, 27465, 20238, 11236, 13350, 22915, 8111, 6226, 17185, 25083, 20300, 29360, 11180, 10157, 19837, 8834, 21578, 24543, 6, 9675, 
29947, 3167, 9226, 15736, 8721, 11020, 20347, 14587, 31039, 32407, 9941, 9527, 9459, 21643, 6924, 25244, 10725, 27787, 17346, 26259, 13040, 25819, 10686, 11292, 20258, 20515, 5530, 6069, 22031, 22639, 14011, 21119, 26218, 4985, 13959, 24732, 13014, 27691, 3025, 30427, 4345, 17760, 8856, 21399, 32466, 14827, 11250, 7900, 4685, 7642, 10819, 5580, 1813, 9468, 3506, 1345, 24234, 21152, 29918, 22452, 18099, 5792, 26060, 14942, 14741, 15262, 4901, 7580, 3396, 2702, 414, 5272, 25690, 18292, 8631, 22566, 13670, 27503, 12712, 28908, 23686, 16375, 31640, 19654, 27448, 16227, 17425, 17257, 10861, 24238, 31921, 20038, 735, 9338, 3874, 30641, 16293, 12629, 21580, 17730, 24324, 7484, 3016, 8571, 25993, 20061, 26520, 2220, 26452, 11553, 22, 32020, 15287, 22890, 17451, 1609, 3840, 17690, 14785, 16346, 18066, 22484, 8827, 15154, 27451, 6, 22691, 14527, 3521, 21799, 30820, 31828, 22974, 12093, 10553, 16588, 19118, 22435, 7077, 3825, 14151, 14089, 3877, 31644, 9993, 9404, 29795, 4381, 9749, 15144, 32684, 26588, 2882, 21915, 16292, 12865, 25710, 6987, 3128, 16338, 32018, 15259, 25045, 15259, 13081, 16282, 31959, 10707, 3571, 5324, 18757, 26812, 19429, 13614, 31419, 14539, 22947, 4212, 24743, 4105, 26656, 6805, 19128, 15545, 5285, 9097, 4500, 6971, 22305, 23633, 6090, 25392, 10944, 11577, 22279, 20447, 9406, 16730, 19852, 10200, 28030, 27490, 24543, 26582, 20438, 18328, 705, 5354, 21165, 16154, 16737, 31190, 4297, 20585, 29647, 21431, 17122, 16680, 14771, 12776, 12283, 7457, 3391, 3362, 30706, 9865, 610, 23016, 27733, 7045, 1599, 6690, 27511, 29933, 13021, 12808, 29123, 591, 2848, 1089, 21841, 1847, 13048, 6476, 24503, 15789, 30680, 22048, 14882, 25088, 15722, 1551, 24485, 11202, 8833, 15344, 2512, 22548, 29263, 20093, 19333, 10532, 13784, 29690, 19975, 32499, 31142, 16664, 25684, 27996, 7102, 3864, 26805, 29522, 13780, 3379, 6291, 14185, 30651, 314, 25228, 28055, 1567, 31610, 23238, 19004, 12662, 482, 18819, 9825, 6452, 30312, 2038, 14653, 3902, 15528, 8022, 2814, 20386, 25294, 24112, 1222, 24709, 20919, 22529, 16883, 11869, 18515, 772, 1699, 14432, 9806, 26697, 32631, 
24891, 18927, 6663, 11928, 14344, 1344, 25651, 10744, 19834, 28271, 27473, 3803, 26971, 3956, 11659, 20117, 13369, 14580, 6656, 14485, 10588, 31845, 
12894, 26018, 25851, 4468, 27315, 26725, 8879, 10915, 15232, 26408, 39, 32055, 6672, 733, 22558, 81, 19207, 12130, 18826, 10075, 17214, 24835, 16150, 7077, 2766, 13121, 2771, 14672, 22123, 27857, 27178, 21356, 19188, 1256, 1558, 861, 8007, 3510, 17296, 1923, 4186, 10288, 30794, 29978, 23432, 25875, 22431, 16734, 13096, 14118, 11210, 26099, 24932, 23231, 12119, 9349, 3401, 22152, 6872, 11692, 22042, 31107, 15065, 12050, 14570, 31308, 8726, 3287, 29801, 7071, 19435, 18996, 24319, 31257, 17163, 25951, 25367, 26435, 8309, 10927, 5566, 30156, 30372, 17153, 7020, 6934, 32006, 346, 20257, 2549, 4016, 13262, 24500, 10931, 22352, 31648, 22376, 21591, 11619, 28842, 16833, 11046, 4264, 5119, 25494, 18539, 15828, 21968, 14694, 3956, 16519, 12940, 
12272, 21469, 4223, 11083, 19197, 13585, 3852, 7533, 11905, 21261, 30915, 15742, 15842, 16487, 8055, 14685, 17816, 21903, 101, 17822, 25334, 18774, 2735, 6700, 7751, 12972, 10764, 8755, 27421, 22446, 27069, 25405, 742, 28128, 17347, 24475, 19904, 12214, 28751, 30726, 19855, 27482, 18810, 4230, 16204, 28329, 5942, 31891, 26272, 29822, 22404, 30330, 14257, 30516, 22248, 9731, 21308, 3174, 11546, 31313, 2276, 11769, 29183, 23305, 21449, 5213, 16087, 29879, 1373, 1551, 20408, 9325, 4723, 16483, 22843, 18093, 13977, 23936, 26229, 28040, 25000, 23468, 21289, 16904, 9113, 10698, 13883, 5324, 2714, 23840, 20584, 25074, 10081, 29790, 21301, 19514, 11201, 19420, 5157, 21351, 22395, 10020, 47, 18921, 10070, 29616, 25455, 19898, 31346, 10485, 22812, 18566, 8665, 27040, 30650, 15118, 3671, 18975, 3473, 22478, 4236, 24675, 349, 12509, 24383, 228, 11079, 32022, 22517, 19686, 14868, 14453, 11714, 
30203, 30877, 9155, 31328, 23242, 1919, 26486, 25982, 24846, 24339, 24019, 22106, 12514, 11681, 18517, 25490, 13627, 26064, 29778, 30008, 1462, 4449, 4828, 19748, 7572, 15389, 18406, 27022, 1026, 2828, 13479, 30172, 18846, 21480, 324, 15800, 32568, 18641, 10665, 22118, 2517, 3138, 4535, 29268, 30714, 16708, 9381, 4851, 15399, 27618, 928, 3270, 28833, 13788, 1973, 4537, 2164, 27552, 6897, 13747, 4537, 17781, 11463, 8558, 27925, 20730, 17841, 26503, 7810, 3791, 32282, 12241, 6994, 6290, 23676, 11503, 14705, 25357, 24262, 4130, 9194, 28845, 13056, 28511, 30892, 2102, 25393, 20901, 29583, 17334, 30849, 21901, 19090, 3000, 22939, 9763, 8038, 21177, 26709, 12788, 10801, 9440, 8851, 22632, 396, 24553, 19048, 338, 9165, 10083, 22911, 21190, 9612, 26907, 17338, 31019, 10592, 1496, 19736, 13712, 1258, 29256, 30428, 9796, 14101, 25659, 18412, 32160, 5019, 24591, 29815, 6952, 18380, 14955, 10458, 15059, 7307, 25137, 31685, 11942, 6553, 1709, 19353, 22151, 28182, 28179, 2837, 19025, 16964, 4136, 16690, 27172, 22159, 18751, 16459, 18687, 5066, 14695, 22657, 9616, 28860, 9187, 2398, 25930, 20699, 25306, 30393, 17849, 16471, 17232, 9433, 14354, 12634, 23893, 16349, 6927, 7823, 15484, 29274, 18169, 14049, 27791, 3911, 8198, 30341, 16001, 4886, 8934, 20794, 22948, 16420, 8089, 20943, 27932, 23123, 5763, 21222, 5524, 17909, 27586, 13561, 
19248, 3565, 25791, 13722, 27586, 5392, 9219, 19455, 13632, 30418, 5965, 11965, 17526, 23326, 3041, 26324, 27640, 16773, 23842, 5100, 30555, 1947, 29027, 17886, 11940, 11934, 30971, 3958, 11777, 9305, 9111, 13944, 26039, 4936, 16341, 9440, 22108, 32253, 30990, 32622, 23878, 10690, 10098, 1378, 9539, 7296, 26203, 7557, 3978, 12768, 25819, 13416, 10482, 2991, 9367, 20464, 32610, 24967, 6873, 31762, 27529, 29612, 26592, 29916, 8911, 9524, 6267, 12725, 9611, 363, 9686, 13797, 23926, 12405, 10131, 19032, 96, 7989, 27676, 1182, 2849, 24174, 27448, 16183, 26835, 32040, 18141, 26382, 6718, 25174, 
20038, 16963, 29076, 27061, 14148, 5165, 13919, 18423, 473, 17056, 17847, 31265, 14851, 24683, 696, 17458, 3030, 16677, 11059, 773, 24013, 31274, 25764, 21880, 25954, 29920, 5476, 24782, 27100, 30271, 24096, 13394, 10601, 16272, 18314, 4157, 5228, 11380, 30798, 5082, 21272, 29225, 1864, 5864, 18750, 25609, 15860, 12864, 3171, 24915, 24358, 15288, 22, 20526, 17915, 14662, 3201, 18923, 28943, 3945, 9021, 23691, 19952, 28356, 1643, 1409, 22739, 17676, 1536, 18873, 25734, 13605, 10080, 3800, 7846, 23176, 27439, 6598, 9234, 23528, 9571, 22122, 14751, 4373, 7070, 19636, 32014, 16416, 23996, 26337, 8763, 13760, 3239, 27898, 4246, 15604, 883, 22942, 29911, 14826, 5799, 27650, 6894, 27680, 24024, 6966, 9273, 7113, 15229, 20138, 28154, 13938, 5886, 32752, 15368, 7909, 32014, 10691, 31685, 13390, 6715, 10313, 13135, 21660, 17347, 28309, 28923, 24106, 682, 13680, 20223, 29855, 21769, 1881, 24430, 3347, 6569, 19914, 5226, 1395, 22992, 17341, 30869, 19238, 25947, 29039, 19400, 21744, 29965, 5476, 22536, 29719, 18215, 7851, 4789, 16581, 27193, 7267, 24069, 9646, 10807, 18046, 32433, 20210, 21455, 965, 6638, 69, 16890, 4380, 20383, 5709, 27090, 11784, 17609, 14155, 22691, 29294, 12871, 30462, 22596, 12702, 19391, 29125, 11688, 3727, 4820, 8963, 9648, 9580, 27293, 31431, 25667, 28240, 32598, 30381, 10657, 15695, 22102, 16895, 500, 949, 
6721, 8480, 4905, 13970, 30591, 11307, 31997, 32374, 7405, 7383, 32603, 5241, 13522, 13214, 23269, 28798, 27156, 30750, 8145, 11449, 19884, 22719, 24310, 17007, 12375, 28054, 28966, 1021, 17550, 25225, 18623, 30748, 7353, 19636, 381, 31331, 22944, 28428, 8850, 17678, 7458, 12866, 18169, 18429, 5417, 21483, 8199, 28928, 13021, 4317, 1603, 18769, 25112, 20188, 3191, 3170, 21786, 2422, 18695, 7129, 14463, 1579, 18818, 29913, 25454, 5073, 25719, 2692, 22546, 22839, 23946, 10686, 10318, 30473, 4038, 18995, 4780, 243, 4661, 28827, 27543, 4617, 2734, 1597, 9931, 103, 8943, 18865, 5385, 29716, 21484, 15595, 10767, 25901, 31590, 13429, 24263, 17727, 28606, 27644, 959, 22516, 1548, 17422, 6105, 32498, 15980, 3362, 30532, 32000, 2712, 985, 30378, 29802, 25276, 25219, 16043, 9383, 7301, 11237, 31627, 11066, 14459, 4922, 13607, 19414, 6546, 9591, 25390, 965, 23291, 6099, 4493, 27787, 14400, 24455, 10539, 12742, 15248, 30418, 12503, 7768, 9816, 29505, 6783, 1224, 18451, 20781, 28834, 1766, 14178, 6277, 30727, 174, 8543, 16078, 6576, 6767, 9006, 27239, 10506, 17965, 25046, 31506, 23142, 11331, 21583, 31664, 32172, 19276, 29661, 24908, 20814, 20292, 18076, 15195, 380, 25579, 30811, 14658, 
10135, 1642, 30125, 10521, 24039, 6713, 15678, 21423, 15248, 17728, 23396, 22990, 19650, 22333, 17398, 30400, 23345, 16485, 32353, 19473, 6853, 23374, 22520, 6807, 3730, 3596, 4236, 3248, 14858, 1691, 13629, 30155, 29297, 5757, 7567, 11050, 25746, 29091, 16065, 23014, 8881, 21649, 18778, 32307, 20160, 21950, 17668, 24549, 13526, 26169, 7837, 14387, 27100, 17810, 23692, 25787, 17034, 27896, 27985, 19399, 13970, 13727, 17504, 21967, 1050, 15973, 14640, 8255, 10096, 21684, 23695, 19833, 31481, 25770, 14392, 5662, 4971, 13431, 11431, 32650, 11324, 28423, 24876, 23453, 14427, 16866, 31295, 30145, 27421, 4688, 2579, 4392, 19834, 3520, 28526, 7254, 13177, 6506, 5815, 15840, 9705, 25908, 20817, 7795, 5202, 9682, 14119, 5143, 25387, 14898, 18056, 4789, 10829, 16407, 13878, 1495, 14248, 23556, 11705, 30640, 10805, 14427, 22521, 10588, 14635, 32710, 1036, 105, 31606, 22230, 18509, 28053, 17253, 6378, 23470, 12505, 25251, 23635, 6479, 7847, 27240, 437, 25167, 19057, 15344, 21168, 20962, 14954, 32045, 29632, 30627, 2192, 17849, 11618, 3116, 5354, 6158, 20601, 21476, 11534, 31481, 14831, 9241, 19687, 18252, 14751, 15951, 23733, 32212, 24691, 30167, 4181, 14730, 31177, 21411, 19395, 4621, 13340, 11352, 12509, 592, 15584, 23717, 14954, 10128, 21421, 8148, 2138, 27786, 6304, 13470, 16719, 29930, 6655, 17476, 11613, 23814, 25883, 16347, 
28174, 8652, 7803, 10215, 30634, 17657, 25910, 29228, 12213, 397, 1441, 449, 21688, 9339, 16170, 25958, 4933, 23972, 8580, 20503, 27701, 7430, 17669, 32738, 20532, 20529, 25164, 1781, 5248, 5115, 3366, 11003, 9453, 11893, 5811, 20137, 5933, 25886, 23236, 6547, 846, 854, 31880, 21061, 17796, 9493, 
22120, 7823, 3369, 6620, 8495, 7712, 23810, 29676, 5742, 4950, 24772, 6071, 4639, 3669, 15318, 24468, 30600, 20055, 13657, 10166, 23906, 19779, 25958, 22111, 17723, 10624, 18326, 13393, 25113, 25099, 22216, 10630, 12896, 6343, 5662, 12832, 28917, 20245, 11081, 8099, 8612, 20645, 28167, 31330, 15551, 16524, 4329, 5943, 15880, 31894, 18266, 13687, 6865, 19165, 3293, 14629, 25442, 1434, 29078, 21862, 5019, 14652, 4108, 15157, 22235, 26807, 4141, 
8280, 17184, 27679, 23443, 12947, 20335, 7541, 26373, 19227, 2422, 18369, 13633, 30285, 20080, 3168, 30456, 9120, 2889, 12960, 27675, 4569, 18434, 5514, 27221, 19326, 600, 9215, 11481, 18316, 7072, 9991, 20829, 620, 24054, 16997, 9830, 8996, 23702, 25455, 11975, 203, 13194, 4636, 32356, 7231, 27270, 22623, 21564, 25114, 32528, 13235, 5543, 18657, 23011, 17655, 3803, 8063, 13206, 12925, 7349, 8178, 11385, 28766, 9143, 6725, 7104, 25360, 30797, 
19390, 23011, 4154, 7252, 13912, 2628, 20934, 30172, 3187, 10259, 16184, 25389, 1227, 23150, 16703, 20489, 10919, 21453, 906, 12337, 32339, 16542, 14557, 811, 31183, 2348, 25956, 17729, 19913, 27333, 9031, 29133, 27337, 11292, 5502, 31412, 10924, 28908, 31975, 22833, 11859, 28894, 9110, 7124, 17308, 5549, 4716, 5578, 26513, 17544, 17643, 4958, 14560, 22200, 20296, 14272, 28300, 1410, 10946, 26629, 9953, 19791, 7219, 26480, 8877, 3082, 26853, 2288, 16557, 24266, 19878, 6633, 19782, 689, 27679, 27191, 31349, 15636, 8801, 5489, 5129, 3803, 193, 29034, 17424, 14123, 20966, 17918, 31631, 18755, 26912, 12811, 21366, 22948, 11003, 25021, 31186, 1653, 1045, 31247, 32581, 24357, 16940, 23950, 6323, 28498, 891, 11872, 10559, 28906, 12359, 12678, 10358, 27024, 12981, 30558, 14537, 14145, 24798, 28012, 577, 20535, 19749, 15705, 9582, 14861, 28873, 7484, 23201, 31781, 25782, 29977, 4443, 4423, 
7329, 32167, 9220, 7306, 22611, 15447, 29664, 25976, 16197, 145, 320, 24429, 23150, 17985, 21493, 16448, 24665, 8594, 18442, 27173, 1914, 6137, 4787, 11474, 21186, 2678, 4992, 8673, 3185, 5399, 17878, 10358, 25388, 1981, 26272, 17441, 23887, 23586, 8770, 25350, 5764, 19739, 24270, 20283, 31637, 29467, 30331, 20337, 30846, 2553, 30291, 15063, 19655, 17395, 13611, 1083, 31248, 19954, 22232, 114, 238, 26896, 4000, 27643, 24565, 15703, 15343, 29663, 2326, 18891, 8267, 17883, 16684, 5547, 25994, 27585, 7633, 1781, 9539, 30236, 5494, 552, 6786, 14867, 21939, 14157, 19136, 9872, 21467, 16440, 15122, 29857, 19412, 29708, 1440, 14110, 8485, 5117, 25433, 3468, 22097, 13658, 32229, 32321, 3684, 3274, 7643, 15305, 19659, 32470, 2357, 22921, 26472, 6567, 9729, 13218, 24294, 23569, 13657, 3608, 4426, 28113, 14996, 12084, 31435, 11539, 25278, 31014, 30948, 13624, 70, 18159, 17319, 17109, 28407, 4222, 4436, 6399, 29737, 6681, 6186, 19398, 28473, 13055, 25213, 5119, 28214, 18252, 10505, 4167, 31453, 18716, 10118, 5956, 13256, 13555, 8061, 32558, 1506, 13661, 32089, 32398, 6686, 10705, 21441, 2630, 19305, 5339, 8485, 21714, 14557, 13691, 5015, 21197, 18487, 20424, 16093, 26807, 11403, 26840, 30916, 9717, 17718, 31204, 20407, 12569, 26901, 24232, 20367, 18788, 29172, 777, 2221, 393, 7241, 5114, 3398, 6068, 3875, 14240, 22783, 3787, 8285, 
4276, 22202, 27892, 10519, 4394, 30895, 17239, 32358, 24592, 5822, 25381, 25163, 22200, 1795, 25561, 226, 22809, 9388, 24254, 19932, 3443, 14599, 945, 22063, 14130, 31455, 27432, 23052, 14613, 6153, 18803, 17170, 655, 32058, 26434, 19137, 27758, 20508, 872, 25905, 18618, 20384, 478, 17412, 10720, 
3733, 3083, 1433, 9487, 15482, 1602, 25730, 5091, 28816, 32397, 31545, 6465, 11060, 30889, 28686, 28034, 364, 15185, 7524, 13779, 9920, 704, 2589, 27355, 18763, 15473, 18003, 4767, 29713, 12329, 73, 20899, 27539, 14903, 26017, 5970, 14497, 31482, 9423, 27040, 21872, 8101, 8909, 5102, 12524, 10303, 14608, 15662, 31823, 20206, 4028, 10567, 30451, 29812, 26644, 10683, 11364, 13818, 27444, 391, 22714, 4109, 20738, 16459, 26406, 13030, 29538, 22698, 16074, 27630, 8617, 30196, 20942, 18561, 18517, 21762, 8880, 22002, 16635, 9314, 13275, 8912, 24192, 12213, 5500, 25960, 2444, 23124, 1425, 27531, 
316, 11578, 22082, 14226, 5143, 31774, 3701, 28318, 25924, 26079, 30877, 31781, 4602, 13349, 5074, 3754, 19255, 24134, 6951, 20939, 14261, 13158, 5944, 2433, 12826, 28643, 11778, 29348};

//rand index
int rand_index = 0;

//for mutation
char binary_list[257][9] = { "00000000", "00000001", "00000010", "00000011", "00000100", "00000101", "00000110", "00000111", "00001000", "00001001", "00001010", "00001011", "00001100", "00001101", "00001110", "00001111", "00010000", "00010001", "00010010", "00010011", "00010100", "00010101", "00010110", "00010111", "00011000", "00011001", "00011010", "00011011", "00011100", "00011101", "00011110", "00011111", "00100000", "00100001",
                            "00100010", "00100011", "00100100", "00100101", "00100110", "00100111", "00101000", "00101001", "00101010", "00101011", "00101100", "00101101", "00101110", "00101111", "00110000", "00110001", "00110010", "00110011", "00110100", "00110101", "00110110", "00110111", "00111000", "00111001", "00111010", "00111011", "00111100", "00111101", "00111110", "00111111", "01000000", "01000001", "01000010", "01000011",
                            "01000100", "01000101", "01000110", "01000111", "01001000", "01001001", "01001010", "01001011", "01001100", "01001101", "01001110", "01001111", "01010000", "01010001", "01010010", "01010011", "01010100", "01010101", "01010110", "01010111", "01011000", "01011001", "01011010", "01011011", "01011100", "01011101", "01011110", "01011111", "01100000", "01100001", "01100010", "01100011", "01100100", "01100101",
                            "01100110", "01100111", "01101000", "01101001", "01101010", "01101011", "01101100", "01101101", "01101110", "01101111", "01110000", "01110001", "01110010", "01110011", "01110100", "01110101", "01110110", "01110111", "01111000", "01111001", "01111010", "01111011", "01111100", "01111101", "01111110", "01111111", "10000000", "10000001", "10000010", "10000011", "10000100", "10000101", "10000110", "10000111",
                            "10001000", "10001001", "10001010", "10001011", "10001100", "10001101", "10001110", "10001111", "10010000", "10010001", "10010010", "10010011", "10010100", "10010101", "10010110", "10010111", "10011000", "10011001", "10011010", "10011011", "10011100", "10011101", "10011110", "10011111", "10100000", "10100001", "10100010", "10100011", "10100100", "10100101", "10100110", "10100111", "10101000", "10101001",
                            "10101010", "10101011", "10101100", "10101101", "10101110", "10101111", "10110000", "10110001", "10110010", "10110011", "10110100", "10110101", "10110110", "10110111", "10111000", "10111001", "10111010", "10111011", "10111100", "10111101", "10111110", "10111111", "11000000", "11000001", "11000010", "11000011", "11000100", "11000101", "11000110", "11000111", "11001000", "11001001", "11001010", "11001011",
                            "11001100", "11001101", "11001110", "11001111", "11010000", "11010001", "11010010", "11010011", "11010100", "11010101", "11010110", "11010111", "11011000", "11011001", "11011010", "11011011", "11011100", "11011101", "11011110", "11011111", "11100000", "11100001", "11100010", "11100011", "11100100", "11100101", "11100110", "11100111", "11101000", "11101001", "11101010", "11101011", "11101100", "11101101",
                            "11101110", "11101111", "11110000", "11110001", "11110010", "11110011", "11110100", "11110101", "11110110", "11110111", "11111000", "11111001", "11111010", "11111011", "11111100", "11111101", "11111110", "11111111", "00000000"};

//for mutation
int binary[11] = {0, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024};


class Node{ 
public:
    unsigned int id;
    bool is_sdn = false;
    vector<unsigned int> adjacent;

    void add_adjacent(unsigned int adj_id) { adjacent.push_back(adj_id); };
    //insert old and sdn node table (for BFS)
    virtual void create_routing_table(unsigned int next_id, unsigned int dst_id, double flowsize = 100) { cout << "error\n" ; };
    //to get deliver table in old node
    virtual unsigned int deliver(unsigned int dst_id) { 
        cout << "deliver error\n";
        return 0;
    };
    //insert sdn table (for GA)
    virtual void set_sdn_table(unsigned int next_id, unsigned int dst_id, double flowsize) { cout << "set_sdn_table\n"; };
    
    virtual void print() { cout << "print error\n"; };
};

class Old_node: public Node{
    map<unsigned int, unsigned int> table;  //deliver table
public:
    //insert old node table (for BFS)
    void create_routing_table(unsigned int next_id, unsigned int dst_id, double flowsize);
    //to get deliver table in old node
    unsigned int deliver(unsigned int dst_id);
    
    void print();
};

class Sdn_node: public Node{
    map<unsigned int, vector<pair<unsigned int, double>>> table; //deliver table
public:
    //insert sdn node table (for BFS)
    void create_routing_table(unsigned int next_id, unsigned int dst_id, double flowsize);
    //insert sdn node table (for GA)
    void set_sdn_table(unsigned int next_id, unsigned int dst_id, double flowsize);
    
    void print();
};

//graph consist of node
class Graph{
    Node **graph;
public:
    int* tree_height; //the height of every bfs tree
    //for topological order
    //map[dst id] = {{node id, score},{},...}
    map<unsigned int, vector<pair<unsigned int, int>>> diliver_order;

    Graph(unsigned int nodes_num, bool* is_sdn);
    Node* get_node(unsigned int now_id) { return graph[now_id]; };
    void bfs(unsigned int dst_id);
    //insert sdn table (for GA)
    void set_sdn_table(vector<double> best);
    //find all the possible paths that doesn't form cycle 
    void find_possible_path(unsigned int dst_id, int* level);

    void print();
};


//GA

//for sdn path pertage
class Gene{
public:
    int gene; //decimal
};

//chromosome consist of all of genes, that represent a possible answer  
class Chromosome{
public:
    double fitness = -1;
    Gene *chromosome;
    unsigned int** load_values;
    vector<unsigned> genes_sum;
    Chromosome();
    void calculate_fitness(vector<pair<unsigned, unsigned>> flows_sorted, Graph graph, double** load_values);
    bool dieout;
    
};

//population consist of all of chromosomes, that represent a set of possible answer
class Population{ 
    Chromosome* population;
    double** load_values;
public:
    void print();
    Population();
    void calculate_fitness(vector<pair<unsigned, unsigned>> flows_sorted, Graph graph);
    void selection();
    void crossover();
    int mutation(int new_gene);
    vector<unsigned int> survive_chromosome;
    vector<pair<double, unsigned int>> competition;
    pair<unsigned int, double> best_chorosome;
    vector<double> get_best_chromosome(unsigned int id);
};

//to divide genes by breakponit， that break the genes between two continuous sdn node 
void set_breakpoint(){
    gene_to_trail_id = new unsigned int[chromosome_size];
    int sum = 0;
    unsigned int breakpoint_index = 1;
    gene_breakpoint.push_back(0);   //let the firt gene start inddex be 0

    //to search the first index bound is gene_breakpoint[0] to gene_breakpoint[1]
    for (auto i = model.begin(); i != model.end(); i++){
        for (auto j = i->second.begin(); j != i->second.end(); j++){
            for (int k = sum; k < sum + j->second.size(); k++){
                gene_to_trail_id[k] = j->second[k - sum];
            }
            sum += j->second.size();
            gene_breakpoint.push_back(sum);
            model_to_chromosome[i->first][j->first] = breakpoint_index;

            breakpoint_index++;
        }
    }
}

//print model
void print_model(){
    cout << "\n";
    for (auto i = model.begin(); i != model.end(); i++){
        cout << "sdnid: " << i->first << "\n";
        for (auto j = i->second.begin(); j != i->second.end(); j++){
            cout << "dst: " << j->first << " path: ";
            for (auto k : j->second)
                cout << k << " ";
            cout << "\n";
            //cout << "sum " << sum << "\n";
        }
        cout << "\n";
    }
}

unsigned int rand_(){
    if(rand_index >= 10000)
        rand_index %= 10000;
    return rand_num[rand_index++];
}

//single point crossover
int crossover_change(int gene1, int gene2, int point){
    int a = gene1 >> point;
    int b = gene2 >> (BINARY_NUM - point);
    return (a << point) + b;
}


bool cmp(pair<unsigned, unsigned> a, pair<unsigned, unsigned> b){
    return a.second > b.second;
}

bool cmp2(pair<unsigned, int>a, pair<unsigned, int> b){
    return a.second > b.second;
}

unsigned int min_(unsigned a, unsigned b){
    if(a > b)
        return b;
    return a;
}

unsigned int max_(unsigned a, int b){
    if(a > b)
        return a;
    return b;
}


int main(){
    std::ios::sync_with_stdio(false);
    std::cin.tie(0);
    std::cout.tie(0);
    cout.precision(4);

    cin >> nodes_num >> sdn_nodes_num >> dsts_num >> links_num >> flows_num;

    // input sdn node id;
    bool is_sdn[nodes_num];
    for (unsigned int i = 0; i < nodes_num; i++){
        is_sdn[i] = false;
    }
    
    unsigned int temp;
    for (unsigned int i = 0; i < sdn_nodes_num; i++){
        cin >> temp;
        is_sdn[temp] = true;
        sdn_list.push_back(temp);
    }
    sort(sdn_list.begin(), sdn_list.end());

    //create graph
    Graph graph(nodes_num, is_sdn);

    // input dst id;
    vector<unsigned int> dsts;
    for (unsigned int i = 0; i < dsts_num; i++){
        cin >> temp;
        dsts.push_back(temp);
    }

    link_to_id = new unsigned *[nodes_num];
    for (unsigned int i = 0; i < nodes_num; i++){
        link_to_id[i] = new unsigned [nodes_num];
        for (unsigned int j = 0; j < nodes_num; j++){
            link_to_id[i][j] = -1;
        }
    }

    //input links
    for (unsigned int i = 0; i < links_num; i++){
        unsigned int id1, id2;
        cin >> temp >> id1 >> id2;
        graph.get_node(id1)->add_adjacent(id2);
        graph.get_node(id2)->add_adjacent(id1);

        link_to_id[id1][id2] = temp;
        link_to_id[id2][id1] = temp;
    }
    
    // input flow
    map<unsigned int, unsigned int> flowsum;
    unsigned int start, dst, size;
    for (unsigned int i = 0; i < flows_num; i++){
        cin >> temp >> start >> dst >> size;
        flows[dst].push_back({start, size});
        if(flowsum.find(dst) == flowsum.end()){
            flowsum[dst] = size;
            flows_size++;
        }
        else
            flowsum[dst] += size;
    }

    //sort flows for select large
    vector<pair<unsigned, unsigned>> flows_sorted(flowsum.begin(), flowsum.end());
    sort(flows_sorted.begin(), flows_sorted.end(), cmp);
    
    //decide the parameter of GA
    if (log(nodes_num) + log(sdn_nodes_num) * 2 + log(dsts_num) < 8.69){
        POPULATION_NUM = 200;
        FLOWSUSE = flows_size;
        STOP = 5;
    }
    else if(log(nodes_num) + log(sdn_nodes_num) * 2 + log(dsts_num) < 17){
        POPULATION_NUM = 100;
        FLOWSUSE = flows_size;
        STOP = 4;
    }
    else{
        POPULATION_NUM = 18;
        FLOWSUSE = flows_size * 0.4;
        STOP = 1;
        IGNORE_PRECENTAGE = 10;
    }
    
    for (unsigned i = 0; i < FLOWSUSE; i++){
        use_flow.insert(flows_sorted[i].first);
    }
    

    //build table
    for (unsigned int i : dsts){
        graph.bfs(i);
    }
    

    int generation = 0;
    //initialize population
    Population population;
    //calculte every chromosome fitness
    population.calculate_fitness(flows_sorted, graph);
    
    //current best answer
    pair<unsigned int, double> cur_best_chromosome;
    int generation_stop = 0;

    while (1){
        population.selection(); //select chromosome
        cur_best_chromosome = population.best_chorosome;
        if (generation_stop >= STOP){
            //insert the chromosome into sdn node table
            unsigned int id = cur_best_chromosome.first;
            vector<double> best = population.get_best_chromosome(id);
            graph.set_sdn_table(best);

            break;
        }
        population.crossover();
        population.calculate_fitness(flows_sorted, graph);
        
        if(cur_best_chromosome.second == population.best_chorosome.second){
            generation_stop++;
        }
        else{
            generation_stop = 0;
            cur_best_chromosome = population.best_chorosome;
        }
        generation++;
    }
    graph.print();
}


//create graph which includes sdn nodes and old node 
Graph::Graph (unsigned int nodes_num, bool* is_sdn){
    graph = new Node *[nodes_num];
    tree_height = new int[nodes_num];
    for (unsigned int i = 0; i < nodes_num; i++){
        if(is_sdn[i]){
            graph[i] = new Sdn_node;
            graph[i]->is_sdn = true;
        }
        else
            graph[i] = new Old_node;
        graph[i]->id = i;
    }
}

//create shortest path and build possible path
void Graph::bfs(unsigned int dst_id){
    bool flag = false;  //to decide whether it need to give a topological order list 
    if(use_flow.count(dst_id))
        flag = true;

    vector<pair<unsigned int, int>> order; //store topological order list
    int nodes_level[nodes_num]; //store node's level
    bool is_visit[nodes_num];
    bool is_first; //record whether it is the first round of bfs 
    int parent_complete; //record the number of parent nodes who completely push their children node
    map<unsigned int, int> children; //record parent nodes
    map<unsigned int, int> parents; //record children nodes

    //initialize
    int level = 0;
    int height = -1; //record the height of the bfs tree
    for (int i = 0; i < nodes_num; i++){
        is_visit[i] = false;
    }

    is_visit[dst_id] = true;
    parents[dst_id] = 0;
    
    graph[dst_id]->create_routing_table(dst_id, dst_id); //store path into table
    nodes_level[dst_id] = 0;

    //loop every level 
    while(!parents.empty()){ 
        parent_complete = 0;
        //loop rounds until all the parents completely push their childern 
        while(parent_complete < parents.size()){
            //let every parent push only one child in every round
            for (auto& x : parents){
                if (x.second == -1){
                    continue;
                }

                unsigned int parent = x.first;
                int index = x.second;
                level = nodes_level[parent];

                if (index < graph[parent]->adjacent.size()){
                    unsigned int child = graph[parent]->adjacent[index];
                    if(!is_visit[child]){
                        is_visit[child] = true;
                        graph[child]->create_routing_table(parent, dst_id); //record table
                        nodes_level[child] = level + 1; //record level

                        children[child] = 0;
                    }
                    x.second++;

                }
                else{ //it means this parent complete
                    parents[parent] = -1;
                    parent_complete++;
                }

                //if it is the first round
                if(is_first){
                    height = max(level, height);
                }

                //for topological order, sort parent node
                if(flag && is_first){
                    if (graph[parent]->is_sdn){
                        //the point is depend on level > sdn id > old
                        order.push_back({parent, level * 1000000 - (parent + 1)});
                    }
                    else{
                        order.push_back({parent, (level - 1) * 1000000});
                    }
                }

            }

            is_first = false;
        }

        is_first = true;
        parents = children;
        children.clear();

    }

    tree_height[dst_id] = height;
    find_possible_path(dst_id, nodes_level); //build every possible path of sdn node which doesn't form cycle

    if(flag){
        sort(order.begin(), order.end(), cmp2); //sort by point
        diliver_order[dst_id] = order;
    }
}

//build model with possible path
void Graph::find_possible_path(unsigned int dst_id, int* levels){
    bool test[links_num];
    for (int i = 0; i < links_num; i++){
        test[i] = false;
    }

    for (unsigned int i : sdn_list){
        if (i == dst_id)
            continue;
        vector<unsigned int> possible_trail;
        for (unsigned int j : graph[i]->adjacent){  //small id will cover big id path
            if (levels[i] >= levels[j] && !test[link_to_id[i][j]]){
                
                test[link_to_id[i][j]] = true; //is used link

                possible_trail.push_back(j);
                chromosome_size++; //every path is a gene
            }
        }
        model[i][dst_id] = possible_trail; //store into model
    }
}

//insert path into old node path
void Old_node::create_routing_table(unsigned int next_id, unsigned int dst_id, double flowsize = 100){
    table[dst_id] = next_id;
}

//insert path into sdn node
void Sdn_node::create_routing_table(unsigned int next_id, unsigned int dst_id, double flowsize = 100){
    if(id == dst_id)
        table[dst_id] = {{id, flowsize}};
    return;
}

void Graph::print(){
    for (unsigned int i = 0; i < nodes_num; i++){
        cout << i << "\n";
        graph[i]->print();
    }
}

void Old_node::print(){
    for (auto i = table.begin(); i != table.end(); i++){
        cout << i->first << " " << i->second << "\n";
    }
}

void Sdn_node::print(){
    for (auto i = table.begin(); i != table.end(); i++){
        cout << i->first << " ";
        for (auto j : i->second){
            if(j.second > 0.001)
                cout << j.first << " " << j.second << "% ";
        }
        cout << "\n";
    }
    
}


//GA
//initialize population
Population::Population(){
    set_breakpoint();
    population = new Chromosome [POPULATION_NUM];

    load_values = new double *[nodes_num]; //for calculate fitness
    for (int i = 0; i < nodes_num; i++){
        load_values[i] = new double[nodes_num];
        for (int j = 0; j < nodes_num; j++){
            load_values[i][j] = 0;
        }
    }
}

//initialize every gene with rand
Chromosome::Chromosome(){
    genes_sum.push_back(0); //for using the same model index
    chromosome = new Gene [chromosome_size];
    int start = 0;
    
    for (unsigned int i = 1; i < gene_breakpoint.size(); i++){ //every sdn node's paths
        int size = gene_breakpoint[i];
        int precision_sum = 0;
        for (int j = start; j < size; j++){
            chromosome[j].gene = rand_() % (PRECISION - 1) + 1; //1~255
            precision_sum += chromosome[j].gene; 
        }
        genes_sum.push_back(precision_sum); //record every sdn node path sum

        start = size;
    }
}

//put every chromosome into fitness function
void Population::calculate_fitness(vector<pair<unsigned, unsigned>> flows_sorted, Graph graph){
    for (int i = 0; i < POPULATION_NUM; i++){
        if(population[i].fitness == -1)
            population[i].calculate_fitness(flows_sorted, graph, load_values);
    }
}

//calculate every chromosome fitness
void Chromosome::calculate_fitness(vector<pair<unsigned, unsigned>> flows_sorted, Graph graph, double** load_values){
    unsigned int use = min_(FLOWSUSE, flows_size); //confirm that FLOWSUSE is not bigger than flow_size
    
    for (unsigned int i = 0; i < use; i++){
        unsigned int dst_id = flows_sorted[i].first;
        unsigned int child;
        //all flows end on the same dst id        
        for(auto j : flows[dst_id]){
            load_values[j.first][j.first] = j.second; //own packet
        }

        for (auto j : graph.diliver_order[dst_id]){ //topological order
            // parent give neighbor packet
            unsigned int parent = j.first;
            
            double packet = load_values[parent][parent];
            if (packet <= TEST || parent == dst_id){
                load_values[parent][parent] = 0;
                continue;
            }

            // find child
            if (!graph.get_node(parent)->is_sdn){
                child = graph.get_node(parent)->deliver(dst_id);
                // deliver packet
                load_values[child][child] += packet;  // node own packet
                load_values[parent][child] += packet; // link load
            }
            else{
                unsigned int end_index = model_to_chromosome[parent][dst_id];
                unsigned int start = gene_breakpoint[end_index - 1];
                unsigned int end = gene_breakpoint[end_index];

                for (unsigned int j = start; j < end; j++){ // for all in sdn table
                    child = gene_to_trail_id[j];
                    // deliver packet
                    load_values[child][child] += packet * chromosome[j].gene / genes_sum[end_index]; // turn to percentage
                    load_values[parent][child] += packet * chromosome[j].gene / genes_sum[end_index];
                }
            }
            load_values[parent][parent] = 0; // done deliver to not repeatly deliver same packet
            
        }
    }

    fitness = -1;
    for (unsigned int i = 0; i < nodes_num; i++){
        for (unsigned int j = 0; j < nodes_num; j++){
            if(fitness < load_values[i][j] && i != j){
                fitness = load_values[i][j];
            }
            load_values[i][j] = 0; //initialize
        }
    }
}

//to get what id should old node deliver 
unsigned int Old_node::deliver(unsigned int dst_id){
    return table[dst_id];
}

//roulette wheel selection
void Population::selection(){
    survive_chromosome.clear(); //initialize
    competition.clear();

    //store every chromosome fitness and sort them
    for (unsigned int i = 0; i < POPULATION_NUM; i++){
        competition.push_back({population[i].fitness, i});
    }
    sort(competition.begin(), competition.end());
    best_chorosome = {competition[0].second, competition[0].first}; //first will be best

    //roulette wheel selection
    for (unsigned int i = 0; i < POPULATION_NUM; i++){
        if (i <= rand_() % POPULATION_NUM * 0.8){ 
            survive_chromosome.push_back(competition[i].second);
            population[competition[i].second].dieout = false; //select
        }
        else{
            population[competition[i].second].dieout = true; //doesn't select
        }
    }
}

//single point crossover
void Population::crossover(){
    for (int i = POPULATION_NUM - 1; i >= 0; i--){  // every chromosome (the worst to the best) 
        unsigned int child = competition[i].second; 
        if (population[child].dieout){
            // randomly find the two parent
            unsigned int parent1;
            unsigned int parent2;
            if(i < 5){ //if i is too small, the choose way will trun to choose two parent from survival node
                parent1 = survive_chromosome[rand_() % survive_chromosome.size()];
                parent2 = survive_chromosome[rand_() % survive_chromosome.size()];
            }
            else{
                parent1 = competition[rand_() % i].second;
                parent2 = competition[rand_() % i].second;
            }
            
            // crossover every gene
            for (unsigned int j = 1; j < gene_breakpoint.size(); j++){  // every break point(sdn node)
                int adjustment = 0; // adjust genes sum 
                for (unsigned int k = gene_breakpoint[j - 1]; k < gene_breakpoint[j]; k++){ // every gene
                    int crossover_point = rand_() % BINARY_NUM;
                    int parent1_gene = population[parent1].chromosome[k].gene;
                    int parent2_gene = population[parent2].chromosome[k].gene;
                    
                    //crossover
                    int new_gene = crossover_change(parent1_gene, parent2_gene, crossover_point);
                    //mutation
                    if (10 <= rand_() % 100 +1)
                        new_gene = mutation(new_gene);
                    
                    if (new_gene == 0) //to comfirm no zero
                        new_gene++;
            
                    adjustment -= population[child].chromosome[k].gene; //delete old value

                    // update information
                    population[child].chromosome[k].gene = new_gene; 

                    adjustment += population[child].chromosome[k].gene; //add new value
                }
                population[child].genes_sum[j] += adjustment;
            }

            population[child].dieout = false;
            population[child].fitness = -1; //should calculate again
        }
    }
}

//single point mutation
int Population::mutation(int new_gene){
    int mutation_point = rand_() % BINARY_NUM + 1;
    if(binary_list[new_gene][BINARY_NUM - mutation_point] == '0')
        return new_gene + binary[mutation_point - 1];
    return new_gene - binary[mutation_point - 1];
}

//get the best genes list
vector<double> Population::get_best_chromosome(unsigned int id){
    vector<double> best;
    for (unsigned int i = 1; i < gene_breakpoint.size(); i++){
         //turn small percentage to zero
        for (int j = gene_breakpoint[i - 1]; j < gene_breakpoint[i]; j++){
            double percentage = (double)(population[id].chromosome[j].gene) * 100 / population[id].genes_sum[i];
            if(percentage < IGNORE_PRECENTAGE){ //turn small precentage to zero
                population[id].genes_sum[i] -= population[id].chromosome[j].gene;
                population[id].chromosome[j].gene = 0;
            }
        }
        //record the answer
        for (int j = gene_breakpoint[i - 1]; j < gene_breakpoint[i]; j++){
            double percentage = (double)(population[id].chromosome[j].gene) * 100 / population[id].genes_sum[i];
            best.push_back(percentage);
        }
    }
    
    return best;
}

//insert best chromosome into sdn node
void Graph::set_sdn_table(vector<double> best){
    int index = 0;
    for (auto i = model.begin(); i != model.end(); i++){
        for (auto j = i->second.begin(); j != i->second.end(); j++){
            for (unsigned int k : j->second){
                graph[i->first]->set_sdn_table(k, j->first, best[index]);
                index++;
            }
        }
    }
}

//insert best chromosome into sdn table
void Sdn_node::set_sdn_table(unsigned int next_id, unsigned int dst_id, double flowsize){
    table[dst_id].push_back({next_id, flowsize});
}

void Population::print(){
    for (int i = 0; i < POPULATION_NUM; i++){
        cout << " \n\n" << i << " possible answer: \n";
        
        for (unsigned int j = 1; j < gene_breakpoint.size(); j++){
            for (int k = gene_breakpoint[j - 1]; k < gene_breakpoint[j]; k++){
                cout << "gene : " << population[i].chromosome[k].gene << "\n";
            }
            cout << "/////genes sum :" << population[i].genes_sum[j] << "\n";
        }
        
        cout << "fitness : " << population[i].fitness << "\n" ;
    }
}
